#!/bin/bash

# Get the default browser
browser_desktop_file=$(xdg-settings get default-web-browser)

# If the browser is not found, fall back to chromium
if [[ -z "$browser_desktop_file" ]]; then
  browser_desktop_file="chromium.desktop"
fi

# Find the .desktop file
search_paths=(
    "$HOME/.local/share/applications"
    "/usr/share/applications"
    "/usr/local/share/applications"
    "/home/ankur/devel/omarchy/applications"
)

desktop_file_path=""
for path in "${search_paths[@]}"; do
    if [ -f "$path/$browser_desktop_file" ]; then
        desktop_file_path="$path/$browser_desktop_file"
        break
    fi
done

# If .desktop file is found, parse the Exec line
if [ -n "$desktop_file_path" ]; then
    # Grep for Exec line and cut the value
    exec_line=$(grep -E '^Exec=' "$desktop_file_path" | cut -d'=' -f2-)
    # Remove desktop entry exec field codes
    base_cmd=$(echo "$exec_line" | sed -e 's/ %U//' -e 's/ %u//' -e 's/ %F//' -e 's/ %f//')
else
    # Fallback to just the browser name
    base_cmd=$(echo "$browser_desktop_file" | sed 's/\.desktop//')
fi

# Get the browser name from the base command for special handling
first_word=$(echo "$base_cmd" | awk '{print $1}')
browser_name=$(basename "$first_word")

args=()
if [[ "$browser_name" == "chromium" || "$browser_name" == "google-chrome-"* ]]; then
  args+=(--ozone-platform=wayland)
fi

# Execute the command.
# We use `bash -c` to properly handle commands with arguments in $base_cmd.
# The script arguments ($@) are passed at the end.
exec bash -c "exec $base_cmd \"\$@\"" _ "${args[@]}" "$@"