#!/bin/bash

if [ "$#" -lt 3 ]; then
  echo -e "\e[32mLet's create a new web app you can start with the app launcher.\n\e[0m"
  APP_NAME=$(gum input --prompt "Name> " --placeholder "My favorite web app")
  APP_URL=$(gum input --prompt "URL> " --placeholder "https://example.com")
  ICON_REF=$(gum input --prompt "Icon URL> " --placeholder "See https://dashboardicons.com (must use PNG!) Or leave blank to fetch automatically")
  CUSTOM_EXEC=""
  MIME_TYPES=""
  INTERACTIVE_MODE=true
else
  APP_NAME="$1"
  APP_URL="$2"
  ICON_REF="$3"
  CUSTOM_EXEC="$4" # Optional custom exec command
  MIME_TYPES="$5"  # Optional mime types
  INTERACTIVE_MODE=false
fi

# Ensure valid execution
if [[ -z "$APP_NAME" || -z "$APP_URL" ]]; then
  echo "You must set app name and app URL"
  exit 1
fi

# Refer to local icon or fetch remotely from URL
ICON_DIR="$HOME/.local/share/applications/icons"

normalize_fetch_url() {
  local url="$1"
  if [[ ! "$url" =~ ^https?:// ]]; then
    printf 'https://%s' "$url"
  else
    printf '%s' "$url"
  fi
}

get_origin() {
  local fetch="$1"
  printf '%s' "$(echo "$fetch" | sed -E 's#(https?://[^/]+).*#\1#')"
}

extract_icon_from_html() {
  local fetch="$1"
  local html
  html=$(curl -sfL "$fetch" || true)
  if [[ -n "$html" ]]; then
    local best_href=""
    local best_size=0
    
    # Find all link tags that contain both href and rel attributes with icon
    # Handle both single and double quotes
    local icon_links
    icon_links=$(printf '%s' "$html" | tr '\n' ' ' | grep -iEo '<link[^>]*>' | grep -iE "rel=['\"]?[^'\"]*icon[^'\"]*['\"]?" | grep -v -iE "rel=['\"]?[^'\"]*apple-touch-icon[^'\"]*['\"]?")
    
    if [[ -n "$icon_links" ]]; then
      while IFS= read -r icon_link; do
        [[ -z "$icon_link" ]] && continue
        
        local href type_attr sizes_attr
        # Handle both single and double quotes for href
        href=$(printf '%s' "$icon_link" | sed -nE "s/.*href=['\"]([^'\"]+)['\"].*/\1/ip")
        # Handle both single and double quotes for type
        type_attr=$(printf '%s' "$icon_link" | sed -nE "s/.*type=['\"]([^'\"]+)['\"].*/\1/ip")
        # Handle both single and double quotes for sizes
        sizes_attr=$(printf '%s' "$icon_link" | sed -nE "s/.*sizes=['\"]([^'\"]+)['\"].*/\1/ip")
        
        # Skip if no href found
        [[ -z "$href" ]] && continue
        
        # Calculate size priority - prefer larger icons
        local size_priority=0
        if [[ -n "$sizes_attr" ]]; then
          # Extract the largest dimension from sizes like "16x16", "32x32", "48x48"
          local max_dimension
          max_dimension=$(echo "$sizes_attr" | grep -oE '[0-9]+' | sort -n | tail -n1)
          if [[ -n "$max_dimension" ]]; then
            size_priority=$max_dimension
          fi
        fi
        
        # If no sizes attribute, give it a medium priority
        if [[ $size_priority -eq 0 ]]; then
          size_priority=24
        fi
        
        # Update best choice if this is larger
        if [[ $size_priority -gt $best_size ]]; then
          best_size=$size_priority
          best_href="$href"
          
          # If it's an SVG type and the URL doesn't end with .svg, append .svg
          if [[ "$type_attr" == "image/svg+xml" && ! "$best_href" =~ \.svg$ ]]; then
            best_href="$best_href.svg"
          fi
        fi
      done <<< "$icon_links"
    fi
    
    # Output the best icon URL found
    if [[ -n "$best_href" ]]; then
      printf '%s' "$best_href"
    fi
  fi
}

resolve_icon_url() {
  local icon_url="$1" fetch="$2" origin="$3"
  if [[ "$icon_url" =~ ^// ]]; then
    local scheme
    scheme=$(echo "$fetch" | sed -E 's#^(https?)://.*#\1#')
    printf '%s' "$scheme:$icon_url"
  elif [[ "$icon_url" =~ ^https?:// ]]; then
    printf '%s' "$icon_url"
  elif [[ "$icon_url" =~ ^/ ]]; then
    printf '%s' "$origin$icon_url"
  else
    printf '%s' "$origin/${icon_url#./}"
  fi
}

select_best_ico_image() {
  local target_png="$1"
  local base_name="${target_png%.png}"
  local best_icon=""
  local max_size=0
  
  # Find all generated PNG files from the ico extraction
  for icon_file in "${base_name}"-*.png; do
    if [[ -f "$icon_file" ]]; then
      # Get the dimensions of the image
      local dimensions
      dimensions=$(magick identify -format "%wx%h" "$icon_file" 2>/dev/null || echo "0x0")
      local width="${dimensions%x*}"
      local height="${dimensions#*x}"
      
      # Calculate total pixels (width * height)
      local size=$((width * height))
      
      # Keep track of the largest image
      if [[ $size -gt $max_size ]]; then
        max_size=$size
        best_icon="$icon_file"
      fi
    fi
  done
  
  # If we found a best icon, move it to the target location
  if [[ -n "$best_icon" && -f "$best_icon" ]]; then
    mv "$best_icon" "$target_png"
    # Clean up the other generated files
    rm -f "${base_name}"-*.png 2>/dev/null || true
    return 0
  fi
  
  return 1
}

download_and_convert() {
  local url="$1" png="$2"
  
  # Extract file extension from URL or default to common formats
  local ext
  ext=$(echo "$url" | sed -E 's/.*\.([^?&#]+).*/\1/' | tr '[:upper:]' '[:lower:]')
  
  # If no extension detected or it's not a common image format, try ico first
  if [[ ! "$ext" =~ ^(png|jpg|jpeg|gif|svg|ico|webp)$ ]]; then
    ext="ico"
  fi
  
  local tmp="${png%.png}.${ext}"
  
  if curl -sfL -o "$tmp" "$url"; then
    # If it's already a PNG, just use it directly
    if [[ "$ext" == "png" ]]; then
      mv "$tmp" "$png"
      printf '%s' "$png"
    else
      # Try to convert to PNG
      if magick "$tmp" "$png" >/dev/null 2>&1; then
        # Special handling for .ico files that create multiple images
        if [[ "$ext" == "ico" ]]; then
          select_best_ico_image "$png"
        fi
        
        printf '%s' "$png"
        rm -f "$tmp" || true
      else
        # If conversion fails, keep the original file
        printf '%s' "$tmp"
      fi
    fi
    return 0
  fi
  return 1
}

mkdir -p "$ICON_DIR"

if [[ $ICON_REF =~ ^https?:// ]]; then
  ICON_PATH="$ICON_DIR/$APP_NAME.png"
  if curl -sL -o "$ICON_PATH" "$ICON_REF"; then
    : # success; file saved to $ICON_PATH
  else
    echo "Error: Failed to download icon." >&2
    exit 1
  fi
else
  if [[ -z "$ICON_REF" ]]; then
    FETCH_URL=$(normalize_fetch_url "$APP_URL")
    APP_ORIGIN=$(get_origin "$FETCH_URL")

    ICO_PATH="$ICON_DIR/$APP_NAME.ico"
    PNG_PATH="$ICON_DIR/$APP_NAME.png"

    ICON_URL="$(extract_icon_from_html "$FETCH_URL")"
    if [[ -z "$ICON_URL" ]]; then
      ICON_URL="$APP_ORIGIN/favicon.ico"
    fi

    ICON_URL="$(resolve_icon_url "$ICON_URL" "$FETCH_URL" "$APP_ORIGIN")"

    if ICON_PATH="$(download_and_convert "$ICON_URL" "$PNG_PATH")"; then
      : # set above
    else
      echo "Error: Could not find or download an icon for $APP_URL. Aborting installation." >&2
      exit 1
    fi
  else
    ICON_PATH="$ICON_DIR/$ICON_REF"
  fi
fi

# Use custom exec if provided, otherwise default behavior
if [[ -n $CUSTOM_EXEC ]]; then
  EXEC_COMMAND="$CUSTOM_EXEC"
else
  EXEC_COMMAND="omarchy-launch-webapp $APP_URL"
fi

# Create application .desktop file
DESKTOP_FILE="$HOME/.local/share/applications/$APP_NAME.desktop"

cat >"$DESKTOP_FILE" <<EOF
[Desktop Entry]
Version=1.0
Name=$APP_NAME
Comment=$APP_NAME
Exec=$EXEC_COMMAND
Terminal=false
Type=Application
Icon=$ICON_PATH
StartupNotify=true
EOF

# Add mime types if provided
if [[ -n $MIME_TYPES ]]; then
  echo "MimeType=$MIME_TYPES" >>"$DESKTOP_FILE"
fi

chmod +x "$DESKTOP_FILE"

if [[ $INTERACTIVE_MODE == true ]]; then
  echo -e "You can now find $APP_NAME using the app launcher (SUPER + SPACE)\n"
fi
