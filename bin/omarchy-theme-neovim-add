#!/usr/bin/env bash
set -euo pipefail

# Parses neovim.lua in new themes to find a theme plugin repo and colorscheme,
# ensures both are present in omarchy/init.lua in the correct sections and format.

err() { printf "Error: %s\n" "$*" >&2; }
info() { printf "%s\n" "$*"; }

INIT_FILE="/home/taha/.config/nvim/lua/omarchy/init.lua"
if [[ $# -lt 1 ]]; then
  err "Usage: $(basename "$0") path/to/neovim.lua"; exit 2;
fi
NEOVIM_FILE="$1"

if [[ ! -f "$NEOVIM_FILE" ]]; then
  err "neovim.lua not found at '$NEOVIM_FILE'"; exit 1;
fi
if [[ ! -f "$INIT_FILE" ]]; then
  err "init.lua not found at '$INIT_FILE'"; exit 1;
fi

# Extract plugin repo from neovim.lua. We assume first string entry is the repo, like "owner/repo".
# Handles surrounding Lua table and commas.
PLUGIN_REPO=$(grep -Eo '"[^"/]+/[^"]+"' "$NEOVIM_FILE" | head -n1 | tr -d '"')

if [[ -z "${PLUGIN_REPO:-}" ]]; then
  err "Could not find a plugin repo (like \"owner/repo\") in '$NEOVIM_FILE'"; exit 1;
fi

# Extract colorscheme from neovim.lua. Search for colorscheme = "name" or LazyVim opts with value
COLORSCHEME=$(grep -Eo 'colorscheme[[:space:]]*=[[:space:]]*"[^"]+"' "$NEOVIM_FILE" | sed -E 's/.*"([^"]+)".*/\1/' | tail -n1 || true)

if [[ -z "${COLORSCHEME:-}" ]]; then
    # Fallback: if no explicit colorscheme is found, use the second part of the repo name, removing any .nvim suffix
    CS_GUESS=${PLUGIN_REPO##*/}
    CS_GUESS=${CS_GUESS%.nvim}
    COLORSCHEME="$CS_GUESS"
fi

# Build plugin table entry format used in init.lua Themes section.
PLUGIN_ENTRY="{ \"$PLUGIN_REPO\", lazy = false, priority = 1000 }"

added_plugin=0
added_colorscheme=0

tmpfile=$(mktemp)
trap 'rm -f "$tmpfile"' EXIT

# Insert plugin if missing, under the "-- Themes" block inside plugins list.
if grep -qF -- "$PLUGIN_REPO" "$INIT_FILE"; then
  info "Plugin already present: $PLUGIN_REPO"
else
  awk -v pe="$PLUGIN_ENTRY" '
    BEGIN { inserted=0; in_plugins=0 }
    /plugins[[:space:]]*=[[:space:]]*\{/ { in_plugins=1 }
    {
      if (!inserted && $0 ~ /--[[:space:]]*Themes/) {
        print $0
        print "    " pe ","
        inserted=1
        next
      }
      if (!inserted && in_plugins && $0 ~ /^[[:space:]]*},[[:space:]]*$/) {
        # Fallback: before closing of plugins table
        print "    " pe ","
        print $0
        inserted=1
        in_plugins=0
        next
      }
      print $0
    }
  ' "$INIT_FILE" > "$tmpfile"
  mv "$tmpfile" "$INIT_FILE"
  added_plugin=1
  info "Inserted plugin: $PLUGIN_REPO"
fi

# Insert colorscheme into install.colorscheme array if missing.
if grep -q "\"${COLORSCHEME}\"" "$INIT_FILE"; then
  info "Colorscheme already present: $COLORSCHEME"
else
  # Insert before the closing bracket of colorscheme array
  awk -v cs="$COLORSCHEME" '
    BEGIN { in_colors=0; in_install=0 }
    /install[[:space:]]*=[[:space:]]*\{/ { in_install=1 }
    in_install && /colorscheme[[:space:]]*=[[:space:]]*\{/ { in_colors=1 }
    {
      if (in_colors && $0 ~ /\}/) {
        # Insert before this closing brace
        print "      \"" cs "\",";
        print $0;
        in_colors=0; in_install=0
        next
      }
      print $0
    }
  ' "$INIT_FILE" > "$tmpfile"
  mv "$tmpfile" "$INIT_FILE"
  added_colorscheme=1
  info "Inserted colorscheme: $COLORSCHEME"
fi