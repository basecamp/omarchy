#!/bin/bash

# omarchy-snapshot: Manage Btrfs snapshots via snapper

# Configurations to manage (root and home)
CONFIGS=("root" "home")

# Use omarchy-state to track pre-snapshot numbers

# Error handling
set -e

show_usage() {
  echo "Usage: omarchy-snapshot <command> [options]"
  echo ""
  echo "Commands:"
  echo "  setup                    Create snapper configurations for root and home"
  echo "  create [description]     Create snapshots for both root and home"
  echo "  pre [description]        Create pre-action snapshots for both root and home"
  echo "  post [description]       Create post-action snapshots (auto-pairs with last pre)"
  echo "  delete <number(s)|all>   Delete snapshot(s) by number or all snapshots from both root and home"
  echo "  list                     List all snapshots for both root and home"
  echo ""
  echo "Options:"
  echo "  -h, --help              Show this help message"
  echo ""
  echo "Examples:"
  echo "  omarchy-snapshot setup                       # Setup snapper configs"
  echo "  omarchy-snapshot create \"Manual backup\"     # Snapshot both root and home"
  echo "  omarchy-snapshot pre \"Omarchy update\"       # Pre-snapshot both"
  echo "  omarchy-snapshot post \"Update completed\"    # Post-snapshot both"
  echo "  omarchy-snapshot delete 45                   # Delete snapshot 45 from both"
  echo "  omarchy-snapshot delete all                  # Delete all snapshots from both"
  echo "  omarchy-snapshot list                        # List both configurations"
}

save_pre_number() {
  local config="$1"
  local number="$2"
  omarchy-state set "snapshot-pre-${config}-${number}"
}

get_last_pre_number() {
  local config="$1"
  local state_dir="$HOME/.local/state/omarchy"

  # Find the most recent pre-snapshot state file for this config
  local pre_file=$(find "$state_dir" -maxdepth 1 -name "snapshot-pre-${config}-*" -type f | sort -V | tail -1)

  if [[ -z "$pre_file" ]]; then
    return 1
  fi

  # Extract the number from the filename
  local pre_number="${pre_file##*-}"

  # Clear this state
  omarchy-state clear "snapshot-pre-${config}-${pre_number}"

  echo "$pre_number"
  return 0
}

check_config() {
  local config="$1"
  if ! snapper -c "$config" list-configs &>/dev/null; then
    echo "Error: snapper configuration '$config' does not exist" >&2
    echo "Run 'omarchy-snapshot setup' to create configurations" >&2
    return 1
  fi
  return 0
}

run_snapper_cmd() {
  local config="$1"
  shift
  sudo snapper -c "$config" "$@"
}

setup_single_config() {
  local config="$1"
  local path="$2"

  if snapper -c "$config" list-configs &>/dev/null; then
    echo "$config configuration already exists"
    return 0
  fi

  echo "Creating $config configuration..."
  if run_snapper_cmd "$config" create-config "$path"; then
    echo "$config configuration created successfully"
    # Set cleanup algorithm and disable timeline
    run_snapper_cmd "$config" set-config "TIMELINE_CREATE=no"
    run_snapper_cmd "$config" set-config "TIMELINE_CLEANUP=no"
    run_snapper_cmd "$config" set-config "NUMBER_LIMIT=50"
    run_snapper_cmd "$config" set-config "NUMBER_LIMIT_IMPORTANT=10"
    return 0
  else
    echo "Failed to create $config configuration" >&2
    return 1
  fi
}

for_each_config() {
  local func="$1"
  shift

  for config in "${CONFIGS[@]}"; do
    if ! check_config "$config"; then
      continue
    fi
    "$func" "$config" "$@"
  done
}

setup_configs() {
  echo "Setting up snapper configurations for root and home..."

  local failed=false

  if ! setup_single_config "root" "/"; then
    failed=true
  fi

  if ! setup_single_config "home" "/home"; then
    failed=true
  fi

  if [[ "$failed" == "true" ]]; then
    exit 1
  fi

  echo "Setup complete!"
}

_create_snapshot_for_config() {
  local config="$1"
  local description="$2"
  local extra_args="${@:3}"

  local desc_arg=""
  if [[ -n "$description" ]]; then
    desc_arg="--description \"$description\""
  fi

  echo "Creating snapshot for $config..."
  local cmd="run_snapper_cmd \"$config\" create $extra_args $desc_arg"

  if eval "$cmd"; then
    echo "Snapshot created successfully for $config"
    return 0
  else
    echo "Failed to create snapshot for $config" >&2
    return 1
  fi
}

create_snapshot() {
  local description="$1"
  for_each_config _create_snapshot_for_config "$description"
}

_create_pre_snapshot_for_config() {
  local config="$1"
  local description="$2"

  local desc_arg=""
  if [[ -n "$description" ]]; then
    desc_arg="--description \"$description\""
  fi

  echo "Creating pre-action snapshot for $config..."
  local cmd="run_snapper_cmd \"$config\" create -t pre $desc_arg --print-number"
  local snapshot_num=$(eval "$cmd")

  if [[ $? -eq 0 ]]; then
    echo "Pre-action snapshot created for $config: #$snapshot_num"
    save_pre_number "$config" "$snapshot_num"
  else
    echo "Failed to create pre-action snapshot for $config" >&2
  fi
}

create_pre_snapshot() {
  local description="$1"
  for_each_config _create_pre_snapshot_for_config "$description"
  echo "Pre-snapshot numbers saved for automatic pairing"
}

_create_post_snapshot_for_config() {
  local config="$1"
  local description="$2"

  # Try to get the last pre-snapshot number
  local pre_number
  if pre_number=$(get_last_pre_number "$config"); then
    echo "Creating post-action snapshot for $config (pre-snapshot #$pre_number)..."

    local desc_arg=""
    if [[ -n "$description" ]]; then
      desc_arg="--description \"$description\""
    fi

    local cmd="run_snapper_cmd \"$config\" create -t post --pre-number \"$pre_number\" $desc_arg"
    eval "$cmd"

    if [[ $? -eq 0 ]]; then
      echo "Post-action snapshot created successfully for $config"
    else
      echo "Failed to create post-action snapshot for $config" >&2
    fi
  else
    echo "Warning: No pre-action snapshot found for configuration '$config'" >&2
  fi
}

create_post_snapshot() {
  local description="$1"
  for_each_config _create_post_snapshot_for_config "$description"
}

delete_snapshots() {
  local args=("$@")

  if [[ ${#args[@]} -eq 0 ]]; then
    echo "Error: At least one snapshot number or 'all' is required" >&2
    echo "Usage: omarchy-snapshot delete <number(s)|all>" >&2
    exit 1
  fi

  local delete_all=false
  local numbers=()

  # Check if "all" is specified
  if [[ "${args[0]}" == "all" ]]; then
    delete_all=true
    echo "Deleting ALL snapshots from both root and home"
  else
    # Validate all numbers
    for num in "${args[@]}"; do
      if ! [[ "$num" =~ ^[0-9]+$ ]]; then
        echo "Error: '$num' is not a valid snapshot number" >&2
        exit 1
      fi
    done
    numbers=("${args[@]}")
    echo "Deleting snapshot(s) from both root and home: ${numbers[*]}"
  fi

  # Ask for confirmation
  if [[ "$delete_all" == "true" ]]; then
    read -p "Delete ALL snapshots from both configurations? This cannot be undone! (y/N): " -n 1 -r
  else
    read -p "Delete these snapshots from both configurations? (y/N): " -n 1 -r
  fi
  echo

  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Deletion cancelled"
    return 0
  fi

  # Process each configuration
  _delete_snapshots_for_config() {
    local config="$1"
    echo "Deleting from $config..."

    if [[ "$delete_all" == "true" ]]; then
      # Get all snapshot numbers (excluding snapshot 0 which is the initial snapshot)
      local all_snapshots=$(run_snapper_cmd "$config" list | grep -E '^\s*[0-9]+' | awk '{print $1}' | grep -v '^0$' | sort -n)
      local snapshot_array=($all_snapshots)

      if [[ ${#snapshot_array[@]} -eq 0 ]]; then
        echo "No snapshots to delete for $config"
        return 0
      fi

      echo "Found ${#snapshot_array[@]} snapshots to delete for $config"
      if run_snapper_cmd "$config" delete "${snapshot_array[@]}"; then
        echo "All snapshots deleted successfully from $config"
      else
        echo "Failed to delete all snapshots from $config" >&2
      fi
    else
      if run_snapper_cmd "$config" delete "${numbers[@]}"; then
        echo "Snapshot(s) deleted successfully from $config"
      else
        echo "Failed to delete snapshot(s) from $config" >&2
      fi
    fi
  }

  for_each_config _delete_snapshots_for_config
}

_list_snapshots_for_config() {
  local config="$1"
  echo ""
  echo "=== Snapshots for configuration '$config' ==="
  run_snapper_cmd "$config" list
}

list_snapshots() {
  for_each_config _list_snapshots_for_config
}

# Parse command line arguments
COMMAND=""
ARGS=()

while [[ $# -gt 0 ]]; do
  case $1 in
  -h | --help)
    show_usage
    exit 0
    ;;
  setup | create | pre | post | delete | list)
    if [[ -n "$COMMAND" ]]; then
      echo "Error: Multiple commands specified" >&2
      exit 1
    fi
    COMMAND="$1"
    shift
    ;;
  *)
    ARGS+=("$1")
    shift
    ;;
  esac
done

# Check if command was provided
if [[ -z "$COMMAND" ]]; then
  echo "Error: No command specified" >&2
  show_usage
  exit 1
fi

# Request sudo access early
case "$COMMAND" in
setup | create | pre | post | delete | list)
  sudo -v
  ;;
esac

# Execute the appropriate command
case "$COMMAND" in
setup)
  setup_configs
  ;;
create)
  create_snapshot "${ARGS[0]}"
  ;;
pre)
  create_pre_snapshot "${ARGS[0]}"
  ;;
post)
  create_post_snapshot "${ARGS[0]}"
  ;;
delete)
  delete_snapshots "${ARGS[@]}"
  ;;
list)
  list_snapshots
  ;;
*)
  echo "Error: Unknown command '$COMMAND'" >&2
  show_usage
  exit 1
  ;;
esac
