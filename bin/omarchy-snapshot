#!/bin/bash

COMMAND="$1"
OMARCHY_PATH=${OMARCHY_PATH:-$HOME/.local/share/omarchy}

if [[ -z $COMMAND ]]; then
  echo "Usage: omarchy-snapshot <create|restore>" >&2
  exit 1
fi

if ! command -v snapper &>/dev/null; then
  exit 127 # omarchy-update can use this to just ignore if snapper is not available
fi

case "$COMMAND" in
create)
  DESC="$(${OMARCHY_PATH}/bin/omarchy-version)"

  echo -e "\e[32mCreate system snapshot\e[0m"

  # Get existing snapper config names from CSV output
  mapfile -t CONFIGS < <(sudo snapper --csvout list-configs | awk -F, 'NR>1 {print $1}')

  for config in "${CONFIGS[@]}"; do
    sudo snapper -c "$config" create -c number -d "$DESC"
  done
  echo

  # Trigger Limine update after creating snapshots (architecture-aware)
  if [[ -x "${OMARCHY_PATH}/bin/omarchy-limine-update" ]]; then
    echo -e "\e[32mUpdating Limine configuration...\e[0m"
    sudo "${OMARCHY_PATH}/bin/omarchy-limine-update"
  fi
  ;;
restore)
  # Use architecture-appropriate restoration tool
  if [ -n "$OMARCHY_ARM" ]; then
    # ARM64: Use bash implementation with kernel versioning
    echo -e "\e[32mRestoring snapshot with kernel versioning (ARM64)...\e[0m"
    sudo "${OMARCHY_PATH}/bin/omarchy-limine-snapper-restore"
  elif command -v limine-snapper-restore &>/dev/null; then
    # x86_64: Use Java implementation
    echo -e "\e[32mRestoring snapshot (x86_64)...\e[0m"
    sudo limine-snapper-restore
  else
    echo -e "\e[31mError: No snapshot restoration tool available\e[0m" >&2
    echo "Install limine-snapper-sync (x86_64) or bin/omarchy-limine-snapper-restore (ARM64)" >&2
    exit 1
  fi
  ;;
esac
