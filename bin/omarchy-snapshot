#!/bin/bash

# Create, list, and mount Btrfs snapshots

SNAPSHOT_DIR="/.snapshots"
SNAPSHOT_PREFIX="omarchy"

check_root() {
  if [[ $EUID -ne 0 ]]; then
    echo "This script must be run as root (use sudo)" >&2
    exit 1
  fi
}

check_btrfs() {
  if ! findmnt -n -o FSTYPE / | grep -q "btrfs"; then
    echo "The root filesystem is not Btrfs" >&2
    exit 1
  fi
}

ensure_snapshot_dir() {
  if [[ ! -d "$SNAPSHOT_DIR" ]]; then
    echo "Creating snapshot directory: $SNAPSHOT_DIR"
    mkdir -p "$SNAPSHOT_DIR"
  fi
}

create_snapshot() {
  local description="${1:-Manual snapshot}"

  check_root
  check_btrfs
  ensure_snapshot_dir

  local timestamp=$(date +%Y%m%d_%H%M%S)
  local snapshot_name="${SNAPSHOT_PREFIX}_${timestamp}"
  local snapshot_path="${SNAPSHOT_DIR}/${snapshot_name}"

  echo "Creating system snapshot (all subvolumes)"
  mkdir -p "$snapshot_path"

  # Hardcoded subvolumes based on a standard arch install
  local subvolumes=(
    "/:root"
    "/home:home"
    "/var/log:var_log"
  )

  local snapshot_count=0
  local failed_count=0

  for subvol_spec in "${subvolumes[@]}"; do
    local target="${subvol_spec%:*}"
    local subvol_name="${subvol_spec#*:}"
    local subvol_snapshot="${snapshot_path}/${subvol_name}"

    echo "  Snapshotting $target"
    if btrfs subvolume snapshot -r "$target" "$subvol_snapshot" 2>/dev/null; then
      ((snapshot_count++))
    else
      echo "  Failed to snapshot $target" >&2
      ((failed_count++))
    fi
  done

  if [[ $snapshot_count -eq 0 ]]; then
    rm -rf "$snapshot_path"
    echo "Failed to create any snapshots" >&2
    exit 1
  fi

  local omarchy_version="unknown"
  if [[ -n "${OMARCHY_PATH:-}" ]] && [[ -x "${OMARCHY_PATH}/bin/omarchy-version" ]]; then
    omarchy_version=$("${OMARCHY_PATH}/bin/omarchy-version" 2>/dev/null || echo "unknown")
  fi

  cat >"${snapshot_path}.info" <<EOF
timestamp=$timestamp
date=$(date '+%Y-%m-%d %H:%M:%S')
description=$description
kernel=$(uname -r)
omarchy_version=$omarchy_version
subvolumes=$snapshot_count
EOF

  echo "Snapshot created: $snapshot_name"
  echo "  Subvolumes: $snapshot_count"
  if [[ $failed_count -gt 0 ]]; then
    echo "  Failed: $failed_count" >&2
  fi
}

list_snapshots() {
  check_root

  if [[ ! -d "$SNAPSHOT_DIR" ]]; then
    echo "No snapshots directory found" >&2
    return 1
  fi

  local snapshots=($(ls -1 "$SNAPSHOT_DIR" 2>/dev/null | grep "^${SNAPSHOT_PREFIX}_" | grep -v ".info$" | sort -r))

  if [[ ${#snapshots[@]} -eq 0 ]]; then
    echo "No snapshots found"
    return 1
  fi

  echo "Available snapshots:"
  echo ""
  printf "%-40s %-20s %-10s %s\n" "NAME" "DATE" "VERSION" "DESCRIPTION"
  printf "%-40s %-20s %-10s %s\n" "----" "----" "-------" "-----------"

  for snapshot in "${snapshots[@]}"; do
    local info_file="${SNAPSHOT_DIR}/${snapshot}.info"
    if [[ -f "$info_file" ]]; then
      local date=$(grep "^date=" "$info_file" | cut -d= -f2-)
      local desc=$(grep "^description=" "$info_file" | cut -d= -f2-)
      local version=$(grep "^omarchy_version=" "$info_file" | cut -d= -f2-)
      printf "%-40s %-20s %-10s %s\n" "$snapshot" "$date" "$version" "$desc"
    else
      printf "%-40s %-20s %-10s %s\n" "$snapshot" "Unknown" "Unknown" "No metadata"
    fi
  done

  echo ""
  local count=${#snapshots[@]}
  echo "Total snapshots: $count"

  local usage=$(du -sh "$SNAPSHOT_DIR" 2>/dev/null | cut -f1)
  echo "Total disk usage: $usage"
}

delete_snapshot() {
  local snapshot_name="$1"

  check_root

  if [[ -z "$snapshot_name" ]]; then
    echo "Please specify a snapshot name to delete or 'all' to delete all" >&2
    exit 1
  fi

  if [[ "$snapshot_name" == "all" ]]; then
    # Delete all snapshots
    local snapshots=($(ls -1 "$SNAPSHOT_DIR" 2>/dev/null | grep "^${SNAPSHOT_PREFIX}_" | grep -v ".info$"))

    if [[ ${#snapshots[@]} -eq 0 ]]; then
      echo "No snapshots found to delete"
      return 0
    fi

    echo "Warning: You are about to delete ALL ${#snapshots[@]} snapshots"
    read -p "Are you sure? (y/N): " -n 1 -r
    echo

    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      echo "Deletion cancelled"
      return 0
    fi

    local deleted_count=0
    for snapshot in "${snapshots[@]}"; do
      echo "Deleting snapshot: $snapshot"
      delete_single_snapshot "$snapshot"
      ((deleted_count++))
    done

    echo "Deleted $deleted_count snapshots"
  else
    # Delete single snapshot
    delete_single_snapshot "$snapshot_name"
  fi
}

delete_single_snapshot() {
  local snapshot_name="$1"
  local snapshot_path="${SNAPSHOT_DIR}/${snapshot_name}"

  if [[ ! -d "$snapshot_path" ]]; then
    echo "Snapshot not found: $snapshot_name" >&2
    exit 1
  fi

  # Delete all subvolume snapshots
  for subvol_dir in "$snapshot_path"/*; do
    if [[ -d "$subvol_dir" ]]; then
      local subvol_name=$(basename "$subvol_dir")
      echo "  Deleting subvolume: $subvol_name"
      if ! btrfs subvolume delete "$subvol_dir" 2>/dev/null; then
        echo "  Failed to delete subvolume: $subvol_name" >&2
      fi
    fi
  done

  # Remove the directory and metadata file
  rmdir "$snapshot_path" 2>/dev/null
  rm -f "${snapshot_path}.info"

  echo "Snapshot deleted: $snapshot_name"
}

mount_snapshot() {
  local snapshot_name="$1"
  local mount_point="${2:-/mnt/snapshot}"

  check_root

  if [[ -z "$snapshot_name" ]]; then
    echo "Please specify a snapshot name to mount" >&2
    exit 1
  fi

  local snapshot_path="${SNAPSHOT_DIR}/${snapshot_name}"

  if [[ ! -d "$snapshot_path" ]]; then
    echo "Snapshot not found: $snapshot_name" >&2
    exit 1
  fi

  if [[ ! -d "$mount_point" ]]; then
    echo "Creating mount point: $mount_point"
    mkdir -p "$mount_point"
  fi

  if mountpoint -q "$mount_point"; then
    echo "Mount point already in use: $mount_point" >&2
    read -p "Unmount existing? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      umount -R "$mount_point" 2>/dev/null || umount "$mount_point"
    else
      exit 1
    fi
  fi

  echo "Mounting snapshot with all subvolumes"

  local mounted_count=0

  # Mount root first
  if [[ -d "$snapshot_path/root" ]]; then
    if mount --bind -o ro "$snapshot_path/root" "$mount_point" 2>/dev/null; then
      ((mounted_count++))
      echo "  Mounted root → $mount_point"
    else
      echo "  Failed to mount root" >&2
    fi
  fi

  # Then mount other subvolumes on top
  for subvol_dir in "$snapshot_path"/*; do
    if [[ ! -d "$subvol_dir" ]]; then continue; fi

    local subvol_name=$(basename "$subvol_dir")

    # Skip root since we already mounted it
    if [[ "$subvol_name" == "root" ]]; then
      continue
    fi

    local target_dir
    if [[ "$subvol_name" == "home" ]]; then
      target_dir="$mount_point/home"
    else
      local rel_path=$(echo "$subvol_name" | sed 's|_|/|g')
      target_dir="$mount_point/$rel_path"
    fi

    # Ensure target directory exists
    mkdir -p "$target_dir"

    if mount --bind -o ro "$subvol_dir" "$target_dir" 2>/dev/null; then
      ((mounted_count++))
      echo "  Mounted $subvol_name → $target_dir"
    else
      echo "  Failed to mount $subvol_name" >&2
    fi
  done

  if [[ $mounted_count -gt 0 ]]; then
    echo "Snapshot mounted at: $mount_point"
    echo "Your home directory is at: $mount_point/home"
    echo "Unmount when done with: sudo umount -R $mount_point"
  else
    echo "Failed to mount any subvolumes" >&2
    exit 1
  fi
}

show_usage() {
  cat <<EOF
Usage: $(basename "$0") [command] [options]

Commands:
  create [description]   Create a new snapshot of all subvolumes
  list                  List all snapshots
  delete <name|all>     Delete a specific snapshot or all snapshots
  mount <name> [path]   Mount snapshot for browsing

Examples:
  $(basename "$0") create "Before system update"
  $(basename "$0") list
  $(basename "$0") delete omarchy_20240101_120000
  $(basename "$0") delete all
  $(basename "$0") mount omarchy_20240101_120000

Note: This script requires root privileges (use sudo)
EOF
}

if [[ -z "$1" ]]; then
  show_usage
  exit 1
fi

case "$1" in
create)
  shift
  create_snapshot "$@"
  ;;
list | ls)
  list_snapshots
  ;;
delete | rm)
  shift
  delete_snapshot "$@"
  ;;
mount)
  shift
  mount_snapshot "$@"
  ;;
help | --help | -h)
  show_usage
  ;;
*)
  echo "Unknown command: $1" >&2
  show_usage >&2
  exit 1
  ;;
esac
