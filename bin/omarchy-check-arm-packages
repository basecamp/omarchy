#!/usr/bin/env bash
#
# omarchy-check-arm-packages - Validate ARM package mappings
#
# This script checks for packages that need ARM-specific handling when
# updating omarchy-base.packages or omarchy-x86.packages. It validates:
# - Packages with direct substitutions (different names on ARM)
# - Packages with custom installation scripts
# - Packages unavailable on ARM (x86-only)
# - Missing packages in ARM configuration
#
# Usage:
#   omarchy-check-arm-packages [--verbose]
#
# See: CLAUDE.md#arm-package-mapping--substitutions
#

set -eo pipefail

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
OMARCHY_ROOT="$(dirname "$SCRIPT_DIR")"
INSTALL_DIR="$OMARCHY_ROOT/install"

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Flags
VERBOSE=false
if [[ "${1:-}" == "--verbose" ]]; then
  VERBOSE=true
fi

# Package Mapping Definitions
# These mappings define how x86 packages translate to ARM

# Direct substitutions: x86_package -> ARM_package
declare -A DIRECT_SUBSTITUTIONS=(
  ["localsend"]="localsend-bin"
  ["omarchy-chromium"]="omarchy-chromium-bin"
)

# Custom installers: x86_package -> script_name (without .sh)
declare -A CUSTOM_INSTALLERS=(
  ["1password-beta"]="1password-app"
  ["1password-cli"]="1password-cli"
  ["asdcontrol"]="asdcontrol-prebuilt"
  ["obs-studio"]="obs-studio"
  ["obsidian"]="obsidian-appimage"
  ["omarchy-nvim"]="omarchy-nvim"
  ["pinta"]="pinta"
  ["signal-desktop"]="signal-desktop-beta"
)

# Unavailable on ARM: packages with no ARM equivalent
declare -a UNAVAILABLE_ON_ARM=(
  "gpu-screen-recorder"
  "spotify"
)

# Special case: yay is installed via install/packaging/yay.sh (not arm_install_scripts)
# It uses omarchy-aur-install to get yay-bin from AUR

# Helper functions
print_header() {
  echo -e "\n${BLUE}=== $1 ===${NC}"
}

print_success() {
  echo -e "${GREEN}✓${NC} $1"
}

print_warning() {
  echo -e "${YELLOW}⚠${NC} $1"
}

print_error() {
  echo -e "${RED}✗${NC} $1"
}

print_info() {
  echo -e "  ${NC}$1${NC}"
}

# Extract packages from package files
extract_packages() {
  local file="$1"
  if [[ ! -f "$file" ]]; then
    echo ""
    return
  fi
  grep -v '^#' "$file" 2>/dev/null | grep -v '^$' | sed 's/#.*$//' | sed 's/[[:space:]]*$//' | sort -u
}

# Check if script exists
script_exists() {
  local script_name="$1"
  [[ -f "$INSTALL_DIR/arm_install_scripts/${script_name}.sh" ]]
}

# Check if package is in official Arch repos
check_official_repo() {
  local package="$1"
  # Try to get package info from pacman database
  if command -v pacman &>/dev/null; then
    if pacman -Si "$package" &>/dev/null; then
      local repo=$(pacman -Si "$package" 2>/dev/null | grep -E "^Repository" | awk '{print $3}')
      if [[ -n "$repo" ]]; then
        echo "$repo"
        return 0
      fi
    fi
  fi
  # If pacman not available or no repo found, try archlinux.org packages API
  local response=$(curl -s "https://archlinux.org/packages/search/json/?name=$package")
  # Parse JSON response (simple grep-based parsing)
  if echo "$response" | grep -q '"pkgname": *"'"$package"'"'; then
    # Extract repo field from the matching package entry
    local repo=$(echo "$response" | grep -A 5 '"pkgname": *"'"$package"'"' | grep '"repo":' | head -1 | sed 's/.*"repo": *"\([^"]*\)".*/\1/')
    if [[ -n "$repo" ]]; then
      echo "$repo"
      return 0
    fi
  fi
  return 1
}

# Check if package is in AUR
check_aur() {
  local package="$1"
  # Query AUR RPC API
  local response=$(curl -s "https://aur.archlinux.org/rpc/?v=5&type=info&arg=$package")
  if echo "$response" | grep -q '"resultcount":0'; then
    return 1
  fi
  return 0
}

# Check ARM architecture support in AUR PKGBUILD
check_aur_arm_support() {
  local package="$1"

  # Query AUR RPC to get package info
  local response=$(curl -s "https://aur.archlinux.org/rpc/?v=5&type=info&arg=$package")

  # Check if package exists
  if echo "$response" | grep -q '"resultcount":0'; then
    echo "not_found"
    return 1
  fi

  # Get PackageBase for split packages
  local package_base=$(echo "$response" | grep -o '"PackageBase":"[^"]*"' | cut -d'"' -f4)
  [[ -z "$package_base" ]] && package_base="$package"

  # Fetch PKGBUILD from AUR
  local pkgbuild_url="https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=$package_base"
  local pkgbuild=$(curl -s "$pkgbuild_url")

  if [[ -z "$pkgbuild" ]]; then
    echo "unknown"
    return 1
  fi

  # Check architecture declarations
  # Look for: arch=('any'), arch=('x86_64' 'aarch64'), arch=('aarch64'), etc.
  if echo "$pkgbuild" | grep -E "^arch=" | grep -qE "'any'|\"any\""; then
    echo "any"
    return 0
  elif echo "$pkgbuild" | grep -E "^arch=" | grep -qE "'aarch64'|\"aarch64\""; then
    echo "aarch64"
    return 0
  elif echo "$pkgbuild" | grep -E "^arch=" | grep -qE "'x86_64'|\"x86_64\"" | grep -qvE "'aarch64'|\"aarch64\""; then
    echo "x86_64_only"
    return 1
  else
    # Architecture not explicitly declared or complex declaration
    echo "unknown"
    return 2
  fi
}

# Get recommendation for package placement
get_package_recommendation() {
  local package="$1"

  print_info "Checking package location and ARM support for '$package'..."

  # Check AUR first for -git, -bin, -devel suffixes (usually AUR packages)
  if [[ "$package" =~ -git$|-bin$|-devel$ ]]; then
    if check_aur "$package"; then
      print_info "  ✓ Found in AUR"

      # Check ARM support
      local arm_support=$(check_aur_arm_support "$package")

      case "$arm_support" in
        "any")
          print_info "  ✓ Architecture: 'any' (platform-independent)"
          print_info "  → Recommendation: Add to omarchy-base-aur.packages"
          ;;
        "aarch64")
          print_info "  ✓ Architecture: Supports aarch64 (ARM64)"
          print_info "  → Recommendation: Add to omarchy-base-aur.packages"
          ;;
        "x86_64_only")
          print_warning "  ✗ Architecture: x86_64 only (no ARM support)"
          print_info "  → Recommendation: Add to omarchy-x86.packages only"
          print_info "    Consider creating custom ARM installer if package is critical"
          ;;
        "unknown")
          print_warning "  ? Architecture: Could not determine from PKGBUILD"
          print_info "  → Recommendation: Test on ARM VM or check PKGBUILD manually"
          print_info "    AUR URL: https://aur.archlinux.org/packages/$package"
          ;;
      esac
      return 0
    fi
  fi

  # Check official repos
  local repo=$(check_official_repo "$package")
  if [[ $? -eq 0 ]]; then
    print_info "  ✓ Found in official repo: $repo"
    print_info "  → Recommendation: Add to omarchy-base-official.packages"
    print_info "    (Official repo packages support ARM by default)"
    return 0
  fi

  # Check AUR (for packages without common suffixes)
  if check_aur "$package"; then
    print_info "  ✓ Found in AUR"

    # Check ARM support
    local arm_support=$(check_aur_arm_support "$package")

    case "$arm_support" in
      "any")
        print_info "  ✓ Architecture: 'any' (platform-independent)"
        print_info "  → Recommendation: Add to omarchy-base-aur.packages"
        ;;
      "aarch64")
        print_info "  ✓ Architecture: Supports aarch64 (ARM64)"
        print_info "  → Recommendation: Add to omarchy-base-aur.packages"
        ;;
      "x86_64_only")
        print_warning "  ✗ Architecture: x86_64 only (no ARM support)"
        print_info "  → Recommendation: Add to omarchy-x86.packages only"
        print_info "    Consider creating custom ARM installer if package is critical"
        ;;
      "unknown")
        print_warning "  ? Architecture: Could not determine from PKGBUILD"
        print_info "  → Recommendation: Test on ARM VM or check PKGBUILD manually"
        print_info "    AUR URL: https://aur.archlinux.org/packages/$package"
        ;;
      "not_found")
        print_error "  ✗ Package not found in AUR"
        return 1
        ;;
    esac
    return 0
  fi

  # Not found anywhere
  print_error "  ✗ Package not found in official repos or AUR"
  print_info "  → Recommendation: Verify package name or check if it was renamed"
  return 1
}

# Main validation logic
main() {
  print_header "ARM Package Mapping Validation"
  echo "Omarchy installation directory: $INSTALL_DIR"
  echo ""

  # Extract package lists
  local base_packages=$(extract_packages "$INSTALL_DIR/omarchy-base.packages")
  local x86_packages=$(extract_packages "$INSTALL_DIR/omarchy-x86.packages")
  local base_official=$(extract_packages "$INSTALL_DIR/omarchy-base-official.packages")
  local base_aur=$(extract_packages "$INSTALL_DIR/omarchy-base-aur.packages")
  local arm_official=$(extract_packages "$INSTALL_DIR/omarchy-arm-official.packages")
  local arm_aur=$(extract_packages "$INSTALL_DIR/omarchy-arm-aur.packages")

  # Combine all ARM packages
  local all_arm_packages=$(echo -e "$base_official\n$base_aur\n$arm_official\n$arm_aur" | sort -u)

  # Track issues
  local issues=0
  local warnings=0

  # Check 1: Direct Substitutions
  print_header "Checking Direct Substitutions"
  for x86_pkg in "${!DIRECT_SUBSTITUTIONS[@]}"; do
    local arm_pkg="${DIRECT_SUBSTITUTIONS[$x86_pkg]}"

    # Check if x86 package is in x86 list
    if ! echo "$x86_packages" | grep -q "^$x86_pkg$"; then
      print_error "$x86_pkg not found in omarchy-x86.packages"
      ((issues++)) || true
    else
      print_success "$x86_pkg -> $arm_pkg mapping defined"
    fi

    # Check if ARM package is in ARM lists
    if echo "$arm_official" | grep -q "^$arm_pkg$"; then
      print_info "✓ $arm_pkg found in omarchy-arm-official.packages"
    elif echo "$arm_aur" | grep -q "^$arm_pkg$"; then
      print_info "✓ $arm_pkg found in omarchy-arm-aur.packages"
    else
      print_error "$arm_pkg not found in ARM package lists"
      ((issues++)) || true
    fi
  done

  # Check 2: Custom Installers
  print_header "Checking Custom Installers"
  for x86_pkg in "${!CUSTOM_INSTALLERS[@]}"; do
    local script_name="${CUSTOM_INSTALLERS[$x86_pkg]}"

    # Check if script exists
    if script_exists "$script_name"; then
      print_success "$x86_pkg -> arm_install_scripts/${script_name}.sh"
    else
      print_error "$x86_pkg references missing script: ${script_name}.sh"
      ((issues++)) || true
    fi

    # Check if x86 package is in x86 list
    if ! echo "$x86_packages" | grep -q "^$x86_pkg$"; then
      print_warning "$x86_pkg not in omarchy-x86.packages (may be in base packages)"
      ((warnings++)) || true
    fi
  done

  # Check 3: Unavailable on ARM
  print_header "Checking Unavailable on ARM"
  for pkg in "${UNAVAILABLE_ON_ARM[@]}"; do
    # Should be in x86 packages only
    if echo "$x86_packages" | grep -q "^$pkg$"; then
      print_success "$pkg correctly in x86-only list"
    else
      print_warning "$pkg not found in omarchy-x86.packages"
      ((warnings++)) || true
    fi

    # Should NOT be in ARM packages
    if echo "$all_arm_packages" | grep -q "^$pkg$"; then
      print_error "$pkg found in ARM packages (should be x86-only)"
      ((issues++)) || true
    fi
  done

  # Check 4: Find packages in base.packages that need ARM handling
  print_header "Checking Base Packages for ARM Issues"

  local needs_attention=()

  while IFS= read -r pkg; do
    [[ -z "$pkg" ]] && continue

    # Skip if already in split files
    if echo "$all_arm_packages" | grep -q "^$pkg$"; then
      continue
    fi

    # Check if it's a known x86-only package
    local is_x86_only=false
    for unavail in "${UNAVAILABLE_ON_ARM[@]}"; do
      if [[ "$pkg" == "$unavail" ]]; then
        is_x86_only=true
        break
      fi
    done

    # Check if it has a custom installer
    local has_custom=false
    for x86_pkg in "${!CUSTOM_INSTALLERS[@]}"; do
      if [[ "$pkg" == "$x86_pkg" ]]; then
        has_custom=true
        break
      fi
    done

    # Check if it has a direct substitution
    local has_substitution=false
    for x86_pkg in "${!DIRECT_SUBSTITUTIONS[@]}"; do
      if [[ "$pkg" == "$x86_pkg" ]]; then
        has_substitution=true
        break
      fi
    done

    if [[ "$is_x86_only" == false ]] && [[ "$has_custom" == false ]] && [[ "$has_substitution" == false ]]; then
      needs_attention+=("$pkg")
    fi
  done <<< "$base_packages"

  if [[ ${#needs_attention[@]} -gt 0 ]]; then
    print_warning "Found ${#needs_attention[@]} package(s) in omarchy-base.packages not in split files"
    echo ""

    for pkg in "${needs_attention[@]}"; do
      echo ""
      get_package_recommendation "$pkg" || true  # Don't exit on individual package check failure
    done

    echo ""
    print_info "Summary: Review recommendations above and update package files accordingly"
    ((warnings++)) || true
  else
    print_success "All base packages accounted for"
  fi

  # Check 5: Find x86 packages that should be removed from base.packages
  print_header "Checking for Platform-Specific Packages in Base"

  local should_remove=()

  while IFS= read -r pkg; do
    [[ -z "$pkg" ]] && continue

    # Check if package is x86-only
    for unavail in "${UNAVAILABLE_ON_ARM[@]}"; do
      if [[ "$pkg" == "$unavail" ]]; then
        should_remove+=("$pkg")
        break
      fi
    done

    # Check if package has custom installer
    for x86_pkg in "${!CUSTOM_INSTALLERS[@]}"; do
      if [[ "$pkg" == "$x86_pkg" ]]; then
        should_remove+=("$pkg")
        break
      fi
    done
  done <<< "$base_packages"

  if [[ ${#should_remove[@]} -gt 0 ]]; then
    print_warning "The following platform-specific packages should be removed from omarchy-base.packages:"
    for pkg in "${should_remove[@]}"; do
      print_info "  $pkg (x86-only or has custom ARM installer)"
    done
    ((warnings++)) || true
  else
    print_success "No platform-specific packages in base list"
  fi

  # Check 6: Verify custom installer scripts exist and are sourced
  print_header "Checking Custom Installer Integration"

  local arch_script="$INSTALL_DIR/packaging/arch.sh"
  if [[ -f "$arch_script" ]]; then
    for x86_pkg in "${!CUSTOM_INSTALLERS[@]}"; do
      local script_name="${CUSTOM_INSTALLERS[$x86_pkg]}"
      if grep -q "source.*${script_name}.sh" "$arch_script"; then
        print_success "${script_name}.sh is sourced in packaging/arch.sh"
      else
        print_error "${script_name}.sh not sourced in packaging/arch.sh"
        ((issues++)) || true
      fi
    done
  else
    print_error "packaging/arch.sh not found"
    ((issues++)) || true
  fi

  # Check 7: Special case - yay installer
  print_header "Checking Special Cases"

  local yay_script="$INSTALL_DIR/packaging/yay.sh"
  if [[ -f "$yay_script" ]]; then
    print_success "yay.sh exists for ARM yay-bin installation"
    if echo "$x86_packages" | grep -q "^yay$"; then
      print_success "yay correctly in omarchy-x86.packages"
    else
      print_warning "yay not found in omarchy-x86.packages"
      ((warnings++)) || true
    fi
  else
    print_error "packaging/yay.sh not found (needed for ARM yay installation)"
    ((issues++)) || true
  fi

  # Summary
  print_header "Validation Summary"

  if [[ $issues -eq 0 ]] && [[ $warnings -eq 0 ]]; then
    print_success "All checks passed! ARM package mappings are correct."
    return 0
  else
    if [[ $issues -gt 0 ]]; then
      print_error "Found $issues critical issue(s) that need fixing"
    fi
    if [[ $warnings -gt 0 ]]; then
      print_warning "Found $warnings warning(s) that may need attention"
    fi
    echo ""
    echo "See CLAUDE.md#arm-package-mapping--substitutions for details"
    return 1
  fi
}

# Run main
main "$@"
