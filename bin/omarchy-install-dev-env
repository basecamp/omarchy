#!/bin/bash

if [[ -z "$1" ]]; then
  echo "Usage: omarchy-install-dev-env <ruby|node|bun|go|laravel|symfony|php|python|elixir|phoenix|rust|java|ocaml|dotnet|clojure>" >&2
  exit 1
fi

install_php() {
  sudo pacman -S php composer php-sqlite xdebug --noconfirm

  # Install Path for Composer
  if [[ ":$PATH:" != *":$HOME/.config/composer/vendor/bin:"* ]]; then
    echo 'export PATH="$HOME/.config/composer/vendor/bin:$PATH"' >>"$HOME/.bashrc"
    source "$HOME/.bashrc"
    echo "Added Composer global bin directory to PATH."
  else
    echo "Composer global bin directory already in PATH."
  fi

  # Enable some extensions
  local php_ini_path="/etc/php/php.ini"
  local extensions_to_enable=(
    "bcmath"
    "intl"
    "iconv"
    "openssl"
    "pdo_sqlite"
    "pdo_mysql"
  )

  # Enable Xdebug
  sudo sed -i \
    -e 's/^;zend_extension=xdebug.so/zend_extension=xdebug.so/' \
    -e 's/^;xdebug.mode=debug/xdebug.mode=debug/' \
    /etc/php/conf.d/xdebug.ini

  for ext in "${extensions_to_enable[@]}"; do
    sudo sed -i "s/^;extension=${ext}/extension=${ext}/" "$php_ini_path"
  done
}

install_laravel_php_extensions() {
  echo "Installing additional PHP extensions for Laravel..."
  # Install ALL extensions to match php.new/Herd requirements
  sudo pacman -S php-gd php-imagick --noconfir
  # Consider removing php-imap if prefer not to rely on aur extensions
  yay -S php-imap --noconfirm

  # Enable some extensions
  local php_ini_path="/etc/php/php.ini"
  local extensions_to_enable=(
    "bz2"
    "calendar"
    "dba"
    "exif"
    "ffi"
    "ftp"
    "gd"
    "gmp"
    "ldap"
  )

  for ext in "${extensions_to_enable[@]}"; do
    sudo sed -i "s/^;extension=${ext}/extension=${ext}/" "$php_ini_path"
  done

  # Enable Opcache (Zend Module) for CLI performance
  local opcache_ini="/etc/php/conf.d/opcache.ini"
  if [ ! -f "$opcache_ini" ]; then
    echo -e "[Zend Opcache]\n;zend_extension=opcache.so\n;opcache.enable=1\n;opcache.enable_cli=0" | sudo tee "$opcache_ini" > /dev/null
  fi
  # Enable the zend_extension and enable for CLI (Crucial for Composer/Artisan performance)
  sudo sed -i \
    -e '/^;zend_extension=opcache/s/^;//' \
    -e '/^;opcache.enable=1/s/^;//' \
    -e '/^;opcache.enable_cli=0/s/^;opcache.enable_cli=0/opcache.enable_cli=1/' \
    "$opcache_ini"

  # Enable imagick extention
  local imagick_ini="/etc/php/conf.d/imagick.ini"
  if [ -f "$imagick_ini" ]; then
       echo "Activating Imagick via its conf.d snippet..."
       sudo sed -i 's/^;\s*extension\s*=\s*imagick/extension=imagick/' "$imagick_ini"
   else
       echo "Warning: imagick.ini not found. Imagick may need manual activation."
   fi
}

install_node() {
  echo -e "Installing Node.js...\n"
  mise use --global node@lts
}

case "$1" in
ruby)
  echo -e "Installing Ruby on Rails...\n"
  omarchy-pkg-add libyaml
  mise use --global ruby@latest
  mise settings add idiomatic_version_file_enable_tools ruby
  mise x ruby -- gem install rails --no-document
  echo -e "\nYou can now run: rails new myproject"
  ;;
node)
  install_node
  ;;
bun)
  echo -e "Installing Bun...\n"
  mise use -g bun@latest
  ;;
deno)
  echo -e "Installing Deno...\n"
  mise use -g deno@latest
  ;;
go)
  echo -e "Installing Go...\n"
  mise use --global go@latest
  ;;
php)
  echo -e "Installing PHP...\n"
  install_php
  ;;
laravel)
  echo -e "Installing PHP and Laravel...\n"
  install_php
  install_laravel_php_extensions
  install_node
  composer global require laravel/installer
  echo -e "\nYou can now run: laravel new myproject"
  ;;
symfony)
  echo -e "Installing PHP and Symfony...\n"
  install_php
  omarchy-pkg-add symfony-cli
  echo -e "\nYou can now run: symfony new --webapp myproject"
  ;;
python)
  echo -e "Installing Python...\n"
  mise use --global python@latest
  echo -e "\nInstalling uv...\n"
  curl -fsSL https://astral.sh/uv/install.sh | sh
  ;;
elixir)
  echo -e "Installing Elixir...\n"
  mise use --global erlang@latest
  mise use --global elixir@latest
  mise x elixir -- mix local.hex --force
  ;;
phoenix)
  echo -e "Installing Phoenix Framework...\n"
  # Ensure Erlang/Elixir first
  mise use --global erlang@latest
  mise use --global elixir@latest
  # Hex & Rebar
  mise x elixir -- mix local.hex --force
  mise x elixir -- mix local.rebar --force
  # Phoenix project (phx_new)
  mise x elixir -- mix archive.install hex phx_new --force
  echo -e "\nYou can now run: mix phx.new my_app"
  ;;
rust)
  echo -e "Installing Rust...\n"
  bash -c "$(curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs)" -- -y
  ;;
java)
  echo -e "Installing Java...\n"
  mise use --global java@latest
  ;;
zig)
  echo -e "Installing Zig...\n"
  mise use --global zig@latest
  mise use -g zls@latest
  ;;
ocaml)
  echo -e "Installing OCaml...\n"
  bash -c "$(curl -fsSL https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh)"
  opam init --yes
  eval "$(opam env)"
  opam install ocaml-lsp-server odoc ocamlformat utop --yes
  ;;
dotnet)
  echo -e "Installing .NET...\n"
  mise use --global dotnet@latest
  ;;
clojure)
  echo -e "Installing Clojure...\n"
  omarchy-pkg-add rlwrap
  mise use --global clojure@latest
  ;;
esac
