#!/bin/bash

MENU_JSON="$HOME/.local/share/omarchy/menu.json"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

#-------------------------------
# Core Helpers
#-------------------------------

terminal() {
    alacritty --class=Omarchy -e "$@"
}

present_terminal() {
    omarchy-launch-floating-terminal-with-presentation "$1"
}

open_in_editor() {
    notify-send "Editing config file" "$1"
    omarchy-launch-editor "$1"
}

install() {
    present_terminal "echo 'Installing $1...'; sudo pacman -S --noconfirm $2"
}

aur_install() {
    present_terminal "echo 'Installing $1 from AUR...'; yay -S --noconfirm $2"
}

install_font() {
    present_terminal "echo 'Installing $1...'; sudo pacman -S --noconfirm --needed $2"
}

#-------------------------------
# Menu Engine
#-------------------------------

menu() {
    local prompt="$1"
    local options="$2"
    echo -e "$options" | omarchy-launch-walker --dmenu --width 295 --minheight 1 --maxheight 600 -p "$prompt…" 2>/dev/null
}

# Build jq path from array of keys
build_jq_path() {
    local result="."
    for key in "$@"; do
        result="$result[\"$key\"]"
    done
    echo "$result"
}

# Get keys at current path
get_menu_keys() {
    local json="$1"
    shift
    local path_array=("$@")
    
    local jq_path=$(build_jq_path "${path_array[@]}")
    jq -r "$jq_path | keys_unsorted[]" <<<"$json" 2>/dev/null
}

# Check if path has a command
is_leaf() {
    local json="$1"
    shift
    local path_array=("$@")
    
    local jq_path=$(build_jq_path "${path_array[@]}")
    jq -e "$jq_path | has(\"command\")" <<<"$json" >/dev/null 2>&1
}

# Execute command at path
run_command() {
    local json="$1"
    shift
    local path_array=("$@")
    
    local jq_path=$(build_jq_path "${path_array[@]}")
    local command=$(jq -r "$jq_path | .command" <<<"$json")
    
    if [[ -n "$command" && "$command" != "null" ]]; then
        eval "$command"
    else
        notify-send "Omarchy" "No command found"
    fi
}

#-------------------------------
# Recursive dynamic menu
#-------------------------------

show_menu() {
    local json="$1"
    shift
    local path_array=("$@")
    
    while true; do
        local options selection
        
        # Get menu options at current path
        options=$(get_menu_keys "$json" "${path_array[@]}")
        [[ -z "$options" ]] && return
        
        # Display menu
        local menu_title="${path_array[*]: -1}"
        [[ -z "$menu_title" ]] && menu_title="Main Menu"
        selection=$(menu "$menu_title" "$options")
        
        # If empty selection (ESC pressed)
        if [[ -z "$selection" ]]; then
            # If we're at main menu, open search
            if [[ ${#path_array[@]} -eq 0 ]]; then
                "$SCRIPT_DIR/omarchy-global-search"
                return
            else
                # Go back to previous menu by returning
                return
            fi
        fi
        
        # Build new path
        local new_path=("${path_array[@]}" "$selection")
        
        if is_leaf "$json" "${new_path[@]}"; then
            run_command "$json" "${new_path[@]}"
            # After executing command, close the menu
            exit 0
        else
            # Go into submenu (recursive call)
            show_menu "$json" "${new_path[@]}"
            # When returning from submenu, stay in current menu (continue loop)
        fi

    done
}

#-------------------------------
# Launcher Entry Point
#-------------------------------

show_main_menu() {
    local json
    json=$(jq '.' "$MENU_JSON")
    show_menu "$json"
}

#-------------------------------
# Entry Point with Direct Menu Access
#-------------------------------

if [[ -n "$1" ]]; then
    # Direct menu access via argument
    json=$(jq '.' "$MENU_JSON")
    
    case "$1" in
        system)
            # Navigate directly to System menu
            show_menu "$json" "  System"
            ;;
       
        power)
            # Navigate directly to Power Profile menu
            show_menu "$json" "  Setup" "󱐋  Power Profile"
            ;;
        *)
            # Fallback to main menu
            show_main_menu
            ;;
    esac
else
    show_main_menu
fi