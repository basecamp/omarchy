#!/bin/bash

OMARCHY_VERSION=$(git -C ~/.local/share/omarchy describe --tags --abbrev=0 2>/dev/null)
PATH="$PATH:$HOME/.local/share/omarchy/bin"

# Source the migration library
source ~/.local/share/omarchy/lib/omarchy-migrations-lib.sh

show_ascii_art() {
  clear
  cat <<'EOF'
 ▄██████▄    ▄▄▄▄███▄▄▄▄      ▄████████    ▄████████  ▄████████    ▄█    █▄    ▄██   ▄  
███    ███ ▄██▀▀▀███▀▀▀██▄   ███    ███   ███    ███ ███    ███   ███    ███   ███   ██▄
███    ███ ███   ███   ███   ███    ███   ███    ███ ███    █▀    ███    ███   ███▄▄▄███
███    ███ ███   ███   ███   ███    ███  ▄███▄▄▄▄██▀ ███         ▄███▄▄▄▄███▄▄ ▀▀▀▀▀▀███
███    ███ ███   ███   ███ ▀███████████ ▀▀███▀▀▀▀▀   ███        ▀▀███▀▀▀▀███▀  ▄██   ███
███    ███ ███   ███   ███   ███    ███ ▀███████████ ███    █▄    ███    ███   ███   ███
███    ███ ███   ███   ███   ███    ███   ███    ███ ███    ███   ███    ███   ███   ███
 ▀██████▀   ▀█   ███   █▀    ███    █▀    ███    ███ ████████▀    ███    █▀     ▀█████▀ 
                                          ███    ███                                    
EOF
  echo "                                                                                 $OMARCHY_VERSION"
}

main_menu() {
  show_ascii_art

  local options=("Theme" "Setup" "Update" "Migrations" "Manual" "Exit")
  choice=$(printf "%s\n" "${options[@]}" | gum choose --header "") || exit 0
  case "$choice" in
  Theme) theme_menu ;;
  Update) update_menu ;;
  Setup) setup_menu ;;
  Migrations) migrations_menu ;;
  Manual) open_manual ;;
  Exit) clear && exit 0 ;;
  esac
}

update_menu() {
  show_ascii_art
  local menu=("Omarchy" "Waybar" "Wofi" "Plymouth" "Desktop apps" "Back")
  local commands=(
    "omarchy-update"
    "omarchy-refresh-waybar"
    "omarchy-refresh-wofi"
    "omarchy-refresh-plymouth"
    "omarchy-refresh-applications"
    "main_menu"
  )
  local choice
  choice=$(printf "%s\n" "${menu[@]}" | gum choose --header="Update") || main_menu
  for i in "${!menu[@]}"; do
    if [[ "${menu[$i]}" == "$choice" ]]; then
      if [[ "$choice" == "Back" ]]; then
        main_menu
      else
        eval "${commands[$i]}"
        ack_command
        main_menu
      fi
      break
    fi
  done
}

theme_menu() {
  show_ascii_art
  local menu=("Pick" "Install" "Remove" "Back")
  local commands=(
    "omarchy-theme-menu"
    "install_theme_prompt"
    "remove_theme_prompt"
    "main_menu"
  )
  local choice
  choice=$(printf "%s\n" "${menu[@]}" | gum choose --header="Theme") || main_menu
  for i in "${!menu[@]}"; do
    if [[ "${menu[$i]}" == "$choice" ]]; then
      if [[ "$choice" == "Back" ]]; then
        main_menu
      else
        eval "${commands[$i]}"
        ack_command
        main_menu
      fi
      break
    fi
  done
}

install_theme_prompt() {
  local url
  url=$(gum input --placeholder="Git repo URL for theme" --header="")
  if [[ -n "$url" ]]; then
    omarchy-theme-install "$url"
  fi
  theme_menu
}

remove_theme_prompt() {
  local theme
  theme=$(gum input --placeholder="Theme name" --header="")
  if [[ -n "$theme" ]]; then
    omarchy-theme-remove "$theme"
  fi
  theme_menu
}

setup_menu() {
  show_ascii_art
  local menu=("Add fingerprint sensor" "Remove fingerprint sensor" "Add Fido2 device" "Remove Fido2 device" "Back")
  local commands=(
    "omarchy-setup-fingerprint"
    "omarchy-setup-fingerprint --remove"
    "omarchy-setup-fido2"
    "omarchy-setup-fido2 --remove"
    "main_menu"
  )
  local choice
  choice=$(printf "%s\n" "${menu[@]}" | gum choose --header="Setup") || main_menu
  for i in "${!menu[@]}"; do
    if [[ "${menu[$i]}" == "$choice" ]]; then
      if [[ "$choice" == "Back" ]]; then
        main_menu
      else
        eval "${commands[$i]}"
        ack_command
        main_menu
      fi
      break
    fi
  done
}

migrations_menu() {
  show_ascii_art
  local menu=("Status" "List" "Create" "Run pending" "Re-run migration" "Back")
  local commands=(
    "migration_status"
    "migration_list"
    "migration_create"
    "migration_run_pending"
    "migration_run_selector"
    "main_menu"
  )
  local choice
  choice=$(printf "%s\n" "${menu[@]}" | gum choose --header="Migrations") || main_menu
  for i in "${!menu[@]}"; do
    if [[ "${menu[$i]}" == "$choice" ]]; then
      if [[ "$choice" == "Back" ]]; then
        main_menu
      else
        eval "${commands[$i]}"
        if [[ "$choice" != "Create" ]]; then
          read -p "Press Enter to return..."
        fi
        migrations_menu
      fi
      break
    fi
  done
}

open_manual() {
  setsid chromium --new-window --ozone-platform=wayland --app="https://manuals.omamix.org/2/the-omarchy-manual" >/dev/null 2>&1 &
  clear
}

ack_command() {
  gum spin --spinner "globe" --title "Done!" -- sleep 1
}

# Handle command line arguments
if [[ $# -gt 0 ]]; then
  case "$1" in
  migrate)
    shift
    case "$1" in
    status)
      migration_status
      ;;
    create)
      migration_create
      ;;
    list)
      migration_list
      ;;
    run)
      shift
      migration_run_new "$1"
      ;;
    "")
      migration_run_pending
      ;;
    *)
      echo "Usage: omarchy migrate [status|create|list|run [all|<timestamp>]]"
      echo "       omarchy migrate           # Run pending migrations"
      echo "       omarchy migrate run       # Select a migration to run"
      echo "       omarchy migrate run all   # Run all migrations"
      echo "       omarchy migrate run <id>  # Run specific migration"
      exit 1
      ;;
    esac
    exit 0
    ;;
  *)
    echo "Usage: omarchy [migrate <subcommand>]"
    echo "       omarchy (interactive menu)"
    exit 1
    ;;
  esac
fi

# If no arguments, show interactive menu
main_menu

