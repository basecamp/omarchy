#!/bin/bash

OMARCHY_VERSION=$(git -C ~/.local/share/omarchy describe --tags --abbrev=0 2>/dev/null)
PATH="$PATH:$HOME/.local/share/omarchy/bin"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

show_ascii_art() {
  clear
  cat <<'EOF'
 ▄██████▄    ▄▄▄▄███▄▄▄▄      ▄████████    ▄████████  ▄████████    ▄█    █▄    ▄██   ▄  
███    ███ ▄██▀▀▀███▀▀▀██▄   ███    ███   ███    ███ ███    ███   ███    ███   ███   ██▄
███    ███ ███   ███   ███   ███    ███   ███    ███ ███    █▀    ███    ███   ███▄▄▄███
███    ███ ███   ███   ███   ███    ███  ▄███▄▄▄▄██▀ ███         ▄███▄▄▄▄███▄▄ ▀▀▀▀▀▀███
███    ███ ███   ███   ███ ▀███████████ ▀▀███▀▀▀▀▀   ███        ▀▀███▀▀▀▀███▀  ▄██   ███
███    ███ ███   ███   ███   ███    ███ ▀███████████ ███    █▄    ███    ███   ███   ███
███    ███ ███   ███   ███   ███    ███   ███    ███ ███    ███   ███    ███   ███   ███
 ▀██████▀   ▀█   ███   █▀    ███    █▀    ███    ███ ████████▀    ███    █▀     ▀█████▀ 
                                          ███    ███                                    
EOF
  echo "                                                                                 $OMARCHY_VERSION"
}

main_menu() {
  show_ascii_art

  local options=("Theme" "Setup" "Update" "Monitor Resolution" "Manual" "Exit")
  choice=$(printf "%s\n" "${options[@]}" | gum choose --header "") || exit 0
  case "$choice" in
  Theme) theme_menu ;;
  Update) update_menu ;;
  Setup) setup_menu ;;
  "Monitor Resolution") monitor_menu ;;
  Manual) open_manual ;;
  Exit) clear && exit 0 ;;
  esac
}

update_menu() {
  show_ascii_art
  local menu=("Omarchy" "Waybar" "Wofi" "Plymouth" "Desktop apps" "Back")
  local commands=(
    "omarchy-update"
    "omarchy-refresh-waybar"
    "omarchy-refresh-wofi"
    "omarchy-refresh-plymouth"
    "omarchy-refresh-applications"
    "main_menu"
  )
  local choice
  choice=$(printf "%s\n" "${menu[@]}" | gum choose --header="Update") || main_menu
  for i in "${!menu[@]}"; do
    if [[ "${menu[$i]}" == "$choice" ]]; then
      if [[ "$choice" == "Back" ]]; then
        main_menu
      else
        eval "${commands[$i]}"
        ack_command
        main_menu
      fi
      break
    fi
  done
}

theme_menu() {
  show_ascii_art
  local menu=("Pick" "Install" "Remove" "Back")
  local commands=(
    "omarchy-theme-menu"
    "install_theme_prompt"
    "remove_theme_prompt"
    "main_menu"
  )
  local choice
  choice=$(printf "%s\n" "${menu[@]}" | gum choose --header="Theme") || main_menu
  for i in "${!menu[@]}"; do
    if [[ "${menu[$i]}" == "$choice" ]]; then
      if [[ "$choice" == "Back" ]]; then
        main_menu
      else
        eval "${commands[$i]}"
        ack_command
        main_menu
      fi
      break
    fi
  done
}

install_theme_prompt() {
  local url
  url=$(gum input --placeholder="Git repo URL for theme" --header="")
  if [[ -n "$url" ]]; then
    omarchy-theme-install "$url"
  fi
  theme_menu
}

remove_theme_prompt() {
  local theme
  theme=$(gum input --placeholder="Theme name" --header="")
  if [[ -n "$theme" ]]; then
    omarchy-theme-remove "$theme"
  fi
  theme_menu
}

setup_menu() {
  show_ascii_art
  local menu=("Add fingerprint sensor" "Remove fingerprint sensor" "Add Fido2 device" "Remove Fido2 device" "Back")
  local commands=(
    "omarchy-setup-fingerprint"
    "omarchy-setup-fingerprint --remove"
    "omarchy-setup-fido2"
    "omarchy-setup-fido2 --remove"
    "main_menu"
  )
  local choice
  choice=$(printf "%s\n" "${menu[@]}" | gum choose --header="Setup") || main_menu
  for i in "${!menu[@]}"; do
    if [[ "${menu[$i]}" == "$choice" ]]; then
      if [[ "$choice" == "Back" ]]; then
        main_menu
      else
        eval "${commands[$i]}"
        ack_command
        main_menu
      fi
      break
    fi
  done
}

monitor_menu() {
  show_ascii_art

  # Detect current resolution
  local resolution=""
  if command -v hyprctl &>/dev/null; then
    resolution=$(hyprctl monitors | grep -A1 "^Monitor" | grep -o '[0-9]\+x[0-9]\+' | head -1)
  elif command -v wlr-randr &>/dev/null; then
    resolution=$(wlr-randr | grep -P "^[A-Za-z0-9-]+\s+\(enabled\)\s+[0-9]+x[0-9]+" | head -1 | grep -o '[0-9]\+x[0-9]\+')
  elif command -v xrandr &>/dev/null; then
    resolution=$(xrandr | grep '*' | head -1 | awk '{print $1}')
  fi

  # Get current settings
  local current_gdk_scale=$(grep '^env = GDK_SCALE,' ~/.local/share/omarchy/config/hypr/monitors.conf 2>/dev/null | cut -d',' -f2 | tr -d ' ' || echo "not set")
  local current_text_scale=$(gsettings get org.gnome.desktop.interface text-scaling-factor 2>/dev/null || echo "not set")

  # Check if global font scaling is configured
  local global_font_scale=""
  if [ -f "$HOME/.local/share/omarchy/config/environment.d/font-scaling.conf" ]; then
    global_font_scale=$(grep "QT_SCALE_FACTOR=" "$HOME/.local/share/omarchy/config/environment.d/font-scaling.conf" | cut -d'=' -f2)
  fi

  echo -e "${BLUE}Current Monitor Settings:${NC}"
  if [[ -n "$resolution" ]]; then
    echo -e "  Resolution: ${YELLOW}$resolution${NC}"
  else
    echo -e "  Resolution: ${RED}Could not detect${NC}"
  fi
  echo -e "  Monitor Scale (GDK_SCALE): ${YELLOW}$current_gdk_scale${NC}"
  if [[ -n "$global_font_scale" ]]; then
    echo -e "  Global Font Scale: ${YELLOW}$global_font_scale${NC}"
  else
    echo -e "  Font Scale Factor: ${YELLOW}$current_text_scale${NC}"
  fi

  # Show recommendations based on resolution
  if [[ -n "$resolution" ]]; then
    show_resolution_recommendations "$resolution"
  fi

  local menu=("Change monitor scale" "Change font scale" "Advanced Configuration" "Back")
  local choice
  choice=$(printf "%s\n" "${menu[@]}" | gum choose --header="Monitor Resolution") || main_menu
  case "$choice" in
  "Change monitor scale") change_monitor_scale ;;
  "Change font scale") change_font_scale ;;
  "Advanced Configuration") advanced_config_menu ;;
  "Back") main_menu ;;
  esac
}

change_monitor_scale() {
  show_ascii_art

  # Get current resolution for recommendations
  local resolution=""
  if command -v hyprctl &>/dev/null; then
    resolution=$(hyprctl monitors | grep -A1 "^Monitor" | grep -o '[0-9]\+x[0-9]\+' | head -1)
  fi

  echo -e "${BLUE}Monitor Scale Options:${NC}"
  echo -e "  1: Standard scaling (1x)"
  echo -e "  2: High-DPI scaling (2x)"

  # Show recommendation based on resolution
  if [[ -n "$resolution" ]]; then
    local width=$(echo "$resolution" | cut -d'x' -f1)
    local current_gdk_scale=$(grep '^env = GDK_SCALE,' ~/.local/share/omarchy/config/hypr/monitors.conf 2>/dev/null | cut -d',' -f2 | tr -d ' ' || echo "1")

    echo -e ""
    if [ "$width" -ge 3840 ]; then
      if [[ "$current_gdk_scale" == "2" ]]; then
        echo -e "${GREEN}Current: 2x scaling for ${resolution} (recommended)${NC}"
      else
        echo -e "${GREEN}Recommendation: 2x scaling for ${resolution}${NC}"
      fi
    else
      if [[ "$current_gdk_scale" == "1" ]]; then
        echo -e "${GREEN}Current: 1x scaling for ${resolution} (recommended)${NC}"
      else
        echo -e "${GREEN}Recommendation: 1x scaling for ${resolution}${NC}"
      fi
    fi
  fi

  local menu=("Set to 1x" "Set to 2x" "Back")
  local choice
  choice=$(printf "%s\n" "${menu[@]}" | gum choose --header="Change Monitor Scale") || monitor_menu
  case "$choice" in
  "Set to 1x") apply_monitor_scale "1" ;;
  "Set to 2x") apply_monitor_scale "2" ;;
  "Back") monitor_menu ;;
  esac
}

change_font_scale() {
  show_ascii_art

  # Get current resolution for recommendations
  local resolution=""
  if command -v hyprctl &>/dev/null; then
    resolution=$(hyprctl monitors | grep -A1 "^Monitor" | grep -o '[0-9]\+x[0-9]\+' | head -1)
  fi

  echo -e "${BLUE}Font Scale Options:${NC}"
  echo -e "  0.7: Smaller text (more content)"
  echo -e "  0.8: Small text (1080p recommended)"
  echo -e "  0.9: Medium text (1440p recommended)"
  echo -e "  1.0: Default text size"
  echo -e "  1.2: Large text (4K recommended)"
  echo -e "  1.4: Larger text (5K recommended)"
  echo -e "  1.6: Largest text (6K recommended)"

  # Show recommendation based on effective resolution (accounting for current scaling)
  if [[ -n "$resolution" ]]; then
    local width=$(echo "$resolution" | cut -d'x' -f1)
    local current_gdk_scale=$(grep '^env = GDK_SCALE,' ~/.local/share/omarchy/config/hypr/monitors.conf 2>/dev/null | cut -d',' -f2 | tr -d ' ' || echo "1")

    # Calculate effective width based on current scaling
    local effective_width=$width
    if [[ "$current_gdk_scale" == "2" ]]; then
      effective_width=$((width / 2))
    fi

    echo -e ""
    if [ "$effective_width" -eq 1920 ]; then
      if [[ "$current_gdk_scale" == "2" ]]; then
        echo -e "${GREEN}Recommendation: 0.8 for ${resolution} (effective 1920x1080)${NC}"
      else
        echo -e "${GREEN}Recommendation: 0.8 for ${resolution}${NC}"
      fi
    elif [ "$effective_width" -eq 2560 ]; then
      if [[ "$current_gdk_scale" == "2" ]]; then
        echo -e "${GREEN}Recommendation: 0.9 for ${resolution} (effective 2560x1440)${NC}"
      else
        echo -e "${GREEN}Recommendation: 0.9 for ${resolution}${NC}"
      fi
    elif [ "$effective_width" -eq 3840 ]; then
      echo -e "${GREEN}Recommendation: 1.2 for ${resolution}${NC}"
    elif [ "$effective_width" -eq 5120 ]; then
      echo -e "${GREEN}Recommendation: 1.4 for ${resolution}${NC}"
    elif [ "$effective_width" -eq 6016 ]; then
      echo -e "${GREEN}Recommendation: 1.6 for ${resolution}${NC}"
    elif [ "$effective_width" -ge 3840 ]; then
      echo -e "${GREEN}Recommendation: 1.2-1.4 for ${resolution}${NC}"
    elif [ "$effective_width" -ge 2560 ]; then
      echo -e "${GREEN}Recommendation: 0.9-1.0 for ${resolution}${NC}"
    else
      echo -e "${GREEN}Recommendation: 0.8-0.9 for ${resolution}${NC}"
    fi
  fi

  local menu=("0.7" "0.8" "0.9" "1.0" "1.2" "1.4" "1.6" "Custom" "Reset to Default" "Back")
  local choice
  choice=$(printf "%s\n" "${menu[@]}" | gum choose --header="Change Font Scale") || monitor_menu
  case "$choice" in
  "0.7" | "0.8" | "0.9" | "1.0" | "1.2" | "1.4" | "1.6") apply_font_scale "$choice" ;;
  "Custom")
    local custom_scale
    custom_scale=$(gum input --placeholder="Font scale factor (e.g., 0.8)" --header="Custom Font Scale")
    if [[ -n "$custom_scale" ]]; then
      apply_font_scale "$custom_scale"
    else
      change_font_scale
    fi
    ;;
  "Reset to Default") reset_font_scale ;;
  "Back") monitor_menu ;;
  esac
}

apply_monitor_scale() {
  local scale=$1
  local monitors_conf="$HOME/.local/share/omarchy/config/hypr/monitors.conf"

  if [ -f "$monitors_conf" ]; then
    sed -i "s/env = GDK_SCALE,[0-9.]*/env = GDK_SCALE,$scale/" "$monitors_conf"
    echo -e "${GREEN}Monitor scale set to $scale in config file${NC}"
  else
    echo -e "${RED}Could not find monitors.conf file${NC}"
  fi

  # Apply changes immediately using hyprctl if available
  if command -v hyprctl &>/dev/null; then
    echo -e "${BLUE}Applying changes to running Hyprland session...${NC}"
    # Get the monitor name
    local monitor_name=$(hyprctl monitors | grep -E "^Monitor" | head -1 | awk '{print $2}' | sed 's/://')
    if [[ -n "$monitor_name" ]]; then
      hyprctl keyword monitor "$monitor_name,preferred,auto,$scale" 2>/dev/null
      echo -e "${GREEN}Applied scale $scale to monitor $monitor_name${NC}"
    else
      echo -e "${YELLOW}Could not determine monitor name for immediate application${NC}"
    fi
  fi

  echo -e "${YELLOW}Note: For permanent changes, restart Hyprland (Super+Esc, then Relaunch)${NC}"

  ack_command
  monitor_menu
}

reset_font_scale() {
  echo -e "${BLUE}Resetting font scaling to default values...${NC}"

  # Reset GTK font scaling
  if command -v gsettings &>/dev/null; then
    gsettings set org.gnome.desktop.interface text-scaling-factor 1.0
    echo -e "${GREEN}✓ GTK font scaling reset to 1.0${NC}"
  fi

  # Reset Alacritty font size to default
  local alacritty_conf="$HOME/.config/alacritty/alacritty.toml"
  if [ -f "$alacritty_conf" ]; then
    sed -i "s/size = [0-9]*/size = 10/" "$alacritty_conf"
    echo -e "${GREEN}✓ Alacritty font size reset to 10${NC}"
  fi

  # Reset Neovim GUI font size to default
  local nvim_conf="$HOME/.local/share/omarchy/config/nvim/lua/plugins/theme.lua"
  if [ -f "$nvim_conf" ]; then
    if grep -q "vim.opt.guifont" "$nvim_conf"; then
      sed -i "s/vim.opt.guifont = .*/vim.opt.guifont = \"CaskaydiaMono Nerd Font:h10\"/" "$nvim_conf"
      echo -e "${GREEN}✓ Neovim GUI font size reset to 10${NC}"
    fi
  fi

  # Remove global font scaling configuration
  local env_file="$HOME/.local/share/omarchy/config/environment.d/font-scaling.conf"
  if [ -f "$env_file" ]; then
    rm "$env_file"
    echo -e "${GREEN}✓ Global font scaling configuration removed${NC}"
  fi

  # Remove fontconfig scaling
  local fontconfig_file="$HOME/.config/fontconfig/fonts.conf"
  if [ -f "$fontconfig_file" ]; then
    rm "$fontconfig_file"
    echo -e "${GREEN}✓ Fontconfig scaling removed${NC}"
  fi

  # Reload fontconfig
  if command -v fc-cache &>/dev/null; then
    fc-cache -f -v >/dev/null 2>&1
    echo -e "${GREEN}✓ Font cache refreshed${NC}"
  fi

  echo -e "${YELLOW}Font scaling reset to default values. Some applications may need to be restarted.${NC}"

  ack_command
  monitor_menu
}

apply_font_scale() {
  local scale=$1

  echo -e "${BLUE}Applying global font scaling factor: $scale${NC}"

  # 1. GTK applications (gsettings)
  if command -v gsettings &>/dev/null; then
    gsettings set org.gnome.desktop.interface text-scaling-factor "$scale"
    echo -e "${GREEN}✓ GTK font scaling set to $scale${NC}"
  fi

  # 2. Electron applications (QT_SCALE_FACTOR)
  export QT_SCALE_FACTOR="$scale"
  echo -e "${GREEN}✓ Electron/Qt font scaling set to $scale${NC}"

  # 3. Alacritty configuration - set font size directly based on resolution
  local alacritty_conf="$HOME/.config/alacritty/alacritty.toml"
  if [ -f "$alacritty_conf" ]; then
    # Determine base font size based on scale factor
    local base_font_size=9 # Default base size
    local new_font_size

    case "$scale" in
    "0.7") new_font_size=7 ;;
    "0.8") new_font_size=8 ;;
    "0.9") new_font_size=9 ;;
    "1.0") new_font_size=10 ;;
    "1.2") new_font_size=11 ;;
    "1.4") new_font_size=13 ;;
    "1.6") new_font_size=15 ;;
    *)
      # For custom values, calculate from base
      new_font_size=$(awk "BEGIN {printf \"%.0f\", $base_font_size * $scale}")
      ;;
    esac

    sed -i "s/size = [0-9]*/size = $new_font_size/" "$alacritty_conf"
    echo -e "${GREEN}✓ Alacritty font size set to $new_font_size${NC}"
  fi

  # 4. Neovim GUI font scaling (for Neovide, etc.)
  local nvim_conf="$HOME/.local/share/omarchy/config/nvim/lua/plugins/theme.lua"
  if [ -f "$nvim_conf" ]; then
    # Look for GUI font settings and update them
    if grep -q "vim.opt.guifont" "$nvim_conf"; then
      # Update existing GUI font setting
      sed -i "s/vim.opt.guifont = .*/vim.opt.guifont = \"CaskaydiaMono Nerd Font:h$new_font_size\"/" "$nvim_conf"
      echo -e "${GREEN}✓ Neovim GUI font size updated to $new_font_size${NC}"
    else
      # Add GUI font setting if it doesn't exist
      echo "vim.opt.guifont = \"CaskaydiaMono Nerd Font:h$new_font_size\"" >>"$nvim_conf"
      echo -e "${GREEN}✓ Neovim GUI font size set to $new_font_size${NC}"
    fi
  fi

  # 5. Environment variables for global scaling
  local env_file="$HOME/.local/share/omarchy/config/environment.d/font-scaling.conf"
  mkdir -p "$(dirname "$env_file")"
  cat >"$env_file" <<EOF
# Font scaling configuration
export QT_SCALE_FACTOR=$scale
export GDK_SCALE_FACTOR=$scale
export XCURSOR_SIZE=$(awk "BEGIN {printf \"%.0f\", 24 * $scale}")
EOF
  echo -e "${GREEN}✓ Environment variables configured${NC}"

  # 6. Fontconfig for system-wide font scaling
  local fontconfig_dir="$HOME/.config/fontconfig"
  mkdir -p "$fontconfig_dir"
  cat >"$fontconfig_dir/fonts.conf" <<EOF
<?xml version="1.0"?>
<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
<fontconfig>
  <match target="pattern">
    <test qual="any" name="size" compare="more">
      <double>0</double>
    </test>
    <edit name="pixelsize" mode="assign">
      <times>
        <name>pixelsize</name>
        <double>$scale</double>
      </times>
    </edit>
  </match>
</fontconfig>
EOF
  echo -e "${GREEN}✓ Fontconfig scaling configured${NC}"

  # 7. Reload fontconfig
  if command -v fc-cache &>/dev/null; then
    fc-cache -f -v >/dev/null 2>&1
    echo -e "${GREEN}✓ Font cache refreshed${NC}"
  fi

  # Verify GTK setting
  if command -v gsettings &>/dev/null; then
    local current_scale=$(gsettings get org.gnome.desktop.interface text-scaling-factor 2>/dev/null)
    echo -e "${BLUE}Current GTK font scale factor: $current_scale${NC}"
  fi

  echo -e "${YELLOW}Note: Font scaling applied globally.${NC}"
  echo -e "${BLUE}To see changes:${NC}"
  echo -e "  • GTK apps: Changes should be immediate"
  echo -e "  • Alacritty terminals: Font size updated in ~/.config/alacritty/alacritty.toml"
  echo -e "  • Electron apps: Restart the application"
  echo -e "  • For environment variables: source ~/.local/share/omarchy/config/environment.d/font-scaling.conf"

  # Offer to reload Hyprland configuration
  if command -v hyprctl &>/dev/null; then
    echo -e "\n${BLUE}To apply font changes to all applications:${NC}"
    if gum confirm "Reload Hyprland configuration now?"; then
      reload_hyprland_config
    fi
  fi

  ack_command
  monitor_menu
}

show_resolution_recommendations() {
  local resolution=$1
  local width=$(echo "$resolution" | cut -d'x' -f1)
  local height=$(echo "$resolution" | cut -d'x' -f2)

  # Get current GDK_SCALE to calculate effective resolution
  local current_gdk_scale=$(grep '^env = GDK_SCALE,' ~/.local/share/omarchy/config/hypr/monitors.conf 2>/dev/null | cut -d',' -f2 | tr -d ' ' || echo "1")

  # Calculate effective resolution based on current scaling
  local effective_width=$width
  local effective_height=$height
  if [[ "$current_gdk_scale" == "2" ]]; then
    effective_width=$((width / 2))
    effective_height=$((height / 2))
  fi

  echo -e "\n${BLUE}Recommendations for ${YELLOW}${resolution}${NC}:"
  if [[ "$current_gdk_scale" == "2" ]]; then
    echo -e "  ${YELLOW}Current scaling: 2x (effective resolution: ${effective_width}x${effective_height})${NC}"
  fi

  # Determine recommendations based on effective resolution
  if [ "$effective_width" -eq 1920 ] && [ "$effective_height" -eq 1080 ]; then
    if [[ "$current_gdk_scale" == "2" ]]; then
      echo -e "  ${GREEN}Monitor Scale: 2x${NC} (current - high-DPI scaling)"
      echo -e "  ${GREEN}Font Scale: 0.8${NC} (smaller text, more content)"
      echo -e "  ${YELLOW}Note: Effective 1080p with 2x scaling${NC}"
    else
      echo -e "  ${GREEN}Monitor Scale: 1x${NC} (standard scaling)"
      echo -e "  ${GREEN}Font Scale: 0.8${NC} (smaller text, more content)"
      echo -e "  ${YELLOW}Note: 1080p works well with 1x scaling${NC}"
    fi
  elif [ "$effective_width" -eq 2560 ] && [ "$effective_height" -eq 1440 ]; then
    if [[ "$current_gdk_scale" == "2" ]]; then
      echo -e "  ${GREEN}Monitor Scale: 2x${NC} (current - high-DPI scaling)"
      echo -e "  ${GREEN}Font Scale: 0.9${NC} (balanced text size)"
      echo -e "  ${YELLOW}Note: Effective 1440p with 2x scaling${NC}"
    else
      echo -e "  ${GREEN}Monitor Scale: 1x${NC} (standard scaling)"
      echo -e "  ${GREEN}Font Scale: 0.9${NC} (balanced text size)"
      echo -e "  ${YELLOW}Note: 1440p is optimal for 1x scaling${NC}"
    fi
  elif [ "$effective_width" -eq 3840 ] && [ "$effective_height" -eq 2160 ]; then
    echo -e "  ${GREEN}Monitor Scale: 2x${NC} (high-DPI scaling)"
    echo -e "  ${GREEN}Font Scale: 1.2${NC} (larger text for readability)"
    echo -e "  ${YELLOW}Note: 4K requires 2x scaling for usable UI elements${NC}"
  elif [ "$effective_width" -eq 5120 ] && [ "$effective_height" -eq 2880 ]; then
    echo -e "  ${GREEN}Monitor Scale: 2x${NC} (high-DPI scaling)"
    echo -e "  ${GREEN}Font Scale: 1.4${NC} (even larger text)"
    echo -e "  ${YELLOW}Note: 5K displays need 2x scaling${NC}"
  elif [ "$effective_width" -eq 6016 ] && [ "$effective_height" -eq 3384 ]; then
    echo -e "  ${GREEN}Monitor Scale: 2x${NC} (high-DPI scaling)"
    echo -e "  ${GREEN}Font Scale: 1.6${NC} (largest text for high-DPI)"
    echo -e "  ${YELLOW}Note: 6K displays require 2x scaling${NC}"
  else
    # Generic recommendations based on effective width
    if [ "$effective_width" -ge 3840 ]; then
      echo -e "  ${GREEN}Monitor Scale: 2x${NC} (recommended for high-DPI)"
      echo -e "  ${GREEN}Font Scale: 1.2-1.4${NC} (adjust based on preference)"
      echo -e "  ${YELLOW}Note: High-resolution display detected${NC}"
    elif [ "$effective_width" -ge 2560 ]; then
      echo -e "  ${GREEN}Monitor Scale: 1x${NC} (recommended)"
      echo -e "  ${GREEN}Font Scale: 0.9-1.0${NC} (adjust based on preference)"
      echo -e "  ${YELLOW}Note: QHD+ display detected${NC}"
    else
      echo -e "  ${GREEN}Monitor Scale: 1x${NC} (recommended)"
      echo -e "  ${GREEN}Font Scale: 0.8-0.9${NC} (adjust based on preference)"
      echo -e "  ${YELLOW}Note: Standard resolution display${NC}"
    fi
  fi
}

advanced_config_menu() {
  show_ascii_art
  echo -e "${BLUE}Advanced Configuration Options:${NC}"
  echo -e "  ${YELLOW}Fractional Scaling:${NC} For displays that need precise scaling"
  echo -e "  ${YELLOW}Custom Monitor Setup:${NC} Manual monitor configuration"
  echo -e "  ${YELLOW}Reset All Settings:${NC} Restore all to defaults"

  local menu=("Fractional Scaling" "Custom Monitor Setup" "Reset All Settings" "Back")
  local choice
  choice=$(printf "%s\n" "${menu[@]}" | gum choose --header="Advanced Configuration") || monitor_menu
  case "$choice" in
  "Fractional Scaling") fractional_scaling_menu ;;
  "Custom Monitor Setup") custom_monitor_setup ;;
  "Reset All Settings") reset_all_settings ;;
  "Back") monitor_menu ;;
  esac
}

fractional_scaling_menu() {
  show_ascii_art
  echo -e "${BLUE}Fractional Scaling${NC}"
  echo -e "${YELLOW}What is fractional scaling?${NC}"
  echo -e "  Fractional scaling allows for precise scaling factors between 1x and 2x."
  echo -e "  This is useful for displays that are too small for 1x but too large for 2x."
  echo -e "  Common use cases: 1440p displays, mixed DPI setups, specific preferences."
  echo -e ""
  echo -e "${GREEN}Recommended fractional scales:${NC}"
  echo -e "  • 1.25x: Good for 1440p displays"
  echo -e "  • 1.33x: Balanced scaling for high-DPI"
  echo -e "  • 1.5x: Middle ground between 1x and 2x"
  echo -e "  • 1.75x: High scaling for very dense displays"
  echo -e ""
  echo -e "${YELLOW}Note: Fractional scaling may cause slight blur in some applications.${NC}"
  echo -e "${YELLOW}For best results, use integer scaling (1x or 2x) when possible.${NC}"

  local menu=("1.25x" "1.33x" "1.5x" "1.75x" "Custom" "Back")
  local choice
  choice=$(printf "%s\n" "${menu[@]}" | gum choose --header="Fractional Scaling") || advanced_config_menu
  case "$choice" in
  "1.25x") apply_fractional_scale "1.25" ;;
  "1.33x") apply_fractional_scale "1.33" ;;
  "1.5x") apply_fractional_scale "1.5" ;;
  "1.75x") apply_fractional_scale "1.75" ;;
  "Custom")
    local custom_scale
    custom_scale=$(gum input --placeholder="Fractional scale (e.g., 1.25)" --header="Custom Fractional Scale")
    if [[ -n "$custom_scale" ]]; then
      apply_fractional_scale "$custom_scale"
    else
      fractional_scaling_menu
    fi
    ;;
  "Back") advanced_config_menu ;;
  esac
}

apply_fractional_scale() {
  local scale=$1
  local monitors_conf="$HOME/.local/share/omarchy/config/hypr/monitors.conf"

  echo -e "${BLUE}Applying fractional scaling: $scale${NC}"
  echo -e "${YELLOW}This will set both GDK_SCALE and monitor scaling to $scale${NC}"

  if gum confirm "Apply fractional scaling $scale?"; then
    # Update GDK_SCALE
    if [ -f "$monitors_conf" ]; then
      sed -i "s/env = GDK_SCALE,[0-9.]*/env = GDK_SCALE,$scale/" "$monitors_conf"
      echo -e "${GREEN}✓ GDK_SCALE set to $scale${NC}"
    fi

    # Update monitor configuration for all detected monitors
    if [ -f "$monitors_conf" ] && command -v hyprctl &>/dev/null; then
      # Comment out existing monitor lines
      sed -i 's/^monitor=/# monitor=/' "$monitors_conf"

      # Get monitor names and add new configurations
      local monitor_names=$(hyprctl monitors | awk '/^Monitor/ {print $2}' | sed 's/://')
      for monitor in $monitor_names; do
        echo "monitor = $monitor,preferred,auto,$scale" >>"$monitors_conf"
      done
      echo -e "${GREEN}✓ Monitor scaling set to $scale${NC}"
    fi

    # Apply immediately if hyprctl is available
    if command -v hyprctl &>/dev/null; then
      local monitor_names=$(hyprctl monitors | awk '/^Monitor/ {print $2}' | sed 's/://')
      for monitor in $monitor_names; do
        hyprctl keyword monitor "$monitor,preferred,auto,$scale" 2>/dev/null
      done
      echo -e "${GREEN}✓ Applied fractional scaling immediately${NC}"
    fi

    echo -e "${YELLOW}Fractional scaling applied. Some applications may need to be restarted.${NC}"
    echo -e "${YELLOW}For best results, consider relaunching Hyprland.${NC}"

    ack_command
    advanced_config_menu
  else
    echo -e "${BLUE}Fractional scaling cancelled.${NC}"
    advanced_config_menu
  fi
}

custom_monitor_setup() {
  show_ascii_art
  echo -e "${BLUE}Custom Monitor Setup${NC}"
  echo -e "${YELLOW}This allows you to manually configure monitor settings.${NC}"
  echo -e "${YELLOW}Use this if automatic detection doesn't work correctly.${NC}"

  local menu=("Manual Monitor Scale" "Manual Font Scale" "Back")
  local choice
  choice=$(printf "%s\n" "${menu[@]}" | gum choose --header="Custom Monitor Setup") || advanced_config_menu
  case "$choice" in
  "Manual Monitor Scale")
    local manual_scale
    manual_scale=$(gum input --placeholder="Monitor scale (e.g., 1, 2, 1.5)" --header="Manual Monitor Scale")
    if [[ -n "$manual_scale" ]]; then
      apply_monitor_scale "$manual_scale"
    else
      custom_monitor_setup
    fi
    ;;
  "Manual Font Scale")
    local manual_font_scale
    manual_font_scale=$(gum input --placeholder="Font scale (e.g., 0.8, 1.2)" --header="Manual Font Scale")
    if [[ -n "$manual_font_scale" ]]; then
      apply_font_scale "$manual_font_scale"
    else
      custom_monitor_setup
    fi
    ;;
  "Back") advanced_config_menu ;;
  esac
}

reset_all_settings() {
  show_ascii_art
  echo -e "${RED}Reset All Monitor and Font Settings${NC}"
  echo -e "${YELLOW}This will reset ALL monitor and font scaling to default values.${NC}"
  echo -e "${YELLOW}This action cannot be undone.${NC}"

  if gum confirm "Are you sure you want to reset ALL settings?"; then
    # Reset monitor scale
    local monitors_conf="$HOME/.local/share/omarchy/config/hypr/monitors.conf"
    if [ -f "$monitors_conf" ]; then
      sed -i "s/env = GDK_SCALE,[0-9.]*/env = GDK_SCALE,1/" "$monitors_conf"
      sed -i 's/^monitor=/# monitor=/' "$monitors_conf"
      echo "monitor=,preferred,auto,1" >>"$monitors_conf"
      echo -e "${GREEN}✓ Monitor scale reset to 1x${NC}"
    fi

    # Reset font scaling
    reset_font_scale

    echo -e "${GREEN}✓ All settings reset to defaults${NC}"
    echo -e "${YELLOW}Consider relaunching Hyprland to apply all changes.${NC}"

    ack_command
    advanced_config_menu
  else
    echo -e "${BLUE}Reset cancelled.${NC}"
    advanced_config_menu
  fi
}

reload_hyprland_config() {
  echo -e "${BLUE}Reloading Hyprland configuration...${NC}"
  echo -e "${YELLOW}Warning: This will close all windows and restart Hyprland.${NC}"
  echo -e "${YELLOW}Make sure to save any unsaved work before continuing.${NC}"

  if gum confirm "Continue with Hyprland relaunch?"; then
    if command -v hyprctl &>/dev/null; then
      # Relaunch Hyprland (this closes all windows and restarts)
      hyprctl dispatch exit
      echo -e "${GREEN}✓ Hyprland relaunch initiated${NC}"
      echo -e "${BLUE}Font scaling changes will be applied when Hyprland restarts.${NC}"
    else
      echo -e "${YELLOW}hyprctl not available, cannot relaunch automatically${NC}"
      echo -e "${YELLOW}Please manually relaunch Hyprland (Super+Esc, then Relaunch)${NC}"
    fi
  else
    echo -e "${BLUE}Relaunch cancelled. Changes will apply on next Hyprland restart.${NC}"
  fi
}

open_manual() {
  setsid chromium --new-window --ozone-platform=wayland --app="https://manuals.omamix.org/2/the-omarchy-manual" >/dev/null 2>&1 &
  clear
}

ack_command() {
  gum spin --spinner "globe" --title "Done!" -- sleep 1
}

main_menu
