# Omarchy Plymouth Theme Script

Window.SetBackgroundTopColor(0.101, 0.105, 0.149);
Window.SetBackgroundBottomColor(0.101, 0.105, 0.149);

# --- Sprite Storage ---
# We use arrays to hold a sprite for each monitor.
logo.sprites = [];
progress_box.sprites = [];
progress_bar.sprites = [];
lock.sprites = [];
entry.sprites = [];
bullet.sprites_by_screen = []; # Array of arrays for bullets on each screen

# --- Image Storage (Load images once) ---
logo.image = Image("logo.png");
progress_box.image = Image("progress_box.png");
progress_bar.original_image = Image("progress_bar.png");
lock.image = Image("lock.png");
entry.image = Image("entry.png");
bullet.image = Image("bullet.png");
scaled_bullet = bullet.image.Scale(7, 7); // Scale bullet once

# Use these to adjust the progress bar timing
global.fake_progress_limit = 0.7;  # Target percentage for fake progress (0.0 to 1.0)
global.fake_progress_duration = 15.0;  # Duration in seconds to reach limit

# Progress bar animation variables
global.fake_progress = 0.0;
global.real_progress = 0.0;
global.fake_progress_active = 0; # 0 / 1 boolean
global.animation_frame = 0;
global.password_shown = 0;  # Track if password dialog has been shown
global.max_progress = 0.0;  # Track the maximum progress reached to prevent backwards movement

fun refresh_callback ()
  {
    global.animation_frame++;
    
    # Animate fake progress to limit over time with easing
    if (global.fake_progress_active == 1)
      {
        # Calculate elapsed time since start
        elapsed_time = global.animation_frame / 50.0;  # Convert frames to seconds (50 FPS)
        
        # Calculate linear progress ratio (0 to 1) based on time
        time_ratio = elapsed_time / global.fake_progress_duration;
        if (time_ratio > 1.0)
          time_ratio = 1.0;
        
        # Apply easing curve: ease-out quadratic
        # Formula: 1 - (1 - x)^2
        eased_ratio = 1 - ((1 - time_ratio) * (1 - time_ratio));
        
        # Calculate fake progress based on eased ratio
        global.fake_progress = eased_ratio * global.fake_progress_limit;
        
        # Update progress bar with fake progress
        update_progress_bar(global.fake_progress);
      }
  }


Plymouth.SetRefreshFunction (refresh_callback);

#----------------------------------------- Helper Functions --------------------------------

fun update_progress_bar(progress)
  {
    # only update if progress is moving forward
    if (progress > global.max_progress)
      {
        global.max_progress = progress;
        width = Math.Int(progress_bar.original_image.GetWidth() * progress);
        if (width < 1) width = 1;  # Ensure minimum width of 1 pixel
        
        progress_bar.image = progress_bar.original_image.Scale(width, progress_bar.original_image.GetHeight());
        for (i = 0; progress_bar.sprites[i]; i++)
          {
            progress_bar.sprites[i].SetImage(progress_bar.image);
          }
      }
  }

fun show_progress_bar()
  {
    for (i = 0; progress_box.sprites[i]; i++)
      {
        progress_box.sprites[i].SetOpacity(1);
        progress_bar.sprites[i].SetOpacity(1);
      }
  }

fun hide_progress_bar()
  {
    for (i = 0; progress_box.sprites[i]; i++)
      {
        progress_box.sprites[i].SetOpacity(0);
        progress_bar.sprites[i].SetOpacity(0);
      }
  }

fun show_password_dialog()
  {
    for (i = 0; lock.sprites[i]; i++)
      {
        lock.sprites[i].SetOpacity(1);
        entry.sprites[i].SetOpacity(1);
      }
  }

fun hide_password_dialog()
  {
    for (i = 0; lock.sprites[i]; i++)
      {
        lock.sprites[i].SetOpacity(0);
        entry.sprites[i].SetOpacity(0);
        # Hide bullets for this screen
        for (j = 0; bullet.sprites_by_screen[i][j]; j++)
          {
            bullet.sprites_by_screen[i][j].SetOpacity(0);
          }
      }
  }

fun start_fake_progress()
  {
    # Don't reset if we already have progress
    if (global.max_progress == 0.0)
      {
        global.fake_progress = 0.0;
        global.real_progress = 0.0;
        update_progress_bar(0.0);
      }
    global.fake_progress_active = 1;
    global.animation_frame = 0;
  }

fun stop_fake_progress()
  {
    global.fake_progress_active = 0;
  }

fun draw_theme_on_all_screens ()
  {
    num_screens = 0;
    while (Window.GetWidth(num_screens) > 0)
      {
        # --- Logo ---
        if (!logo.sprites[num_screens]) logo.sprites[num_screens] = Sprite();
        logo.sprites[num_screens].SetImage(logo.image);
        logo.sprites[num_screens].SetX(Window.GetX(num_screens) + Window.GetWidth(num_screens) / 2 - logo.image.GetWidth() / 2);
        logo.sprites[num_screens].SetY(Window.GetY(num_screens) + Window.GetHeight(num_screens) / 2 - logo.image.GetHeight() / 2);
        logo.sprites[num_screens].SetOpacity(1);

        # --- Password Dialogue Elements (Lock & Entry) ---
        # Scale lock relative to entry field height
        lock_height = entry.image.GetHeight() * 0.8;
        lock_scale = lock_height / lock.image.GetHeight();
        lock_width = lock.image.GetWidth() * lock_scale;
        scaled_lock = lock.image.Scale(lock_width, lock_height);

        if (!entry.sprites[num_screens]) entry.sprites[num_screens] = Sprite();
        entry_x = Window.GetX(num_screens) + Window.GetWidth(num_screens) / 2 - entry.image.GetWidth() / 2;
        entry_y = logo.sprites[num_screens].GetY() + logo.image.GetHeight() + 40;
        entry.sprites[num_screens].SetImage(entry.image);
        entry.sprites[num_screens].SetPosition(entry_x, entry_y, 10001);

        if (!lock.sprites[num_screens]) lock.sprites[num_screens] = Sprite();
        lock_x = entry_x - lock_width - 15;
        lock_y = entry_y + entry.image.GetHeight() / 2 - lock_height / 2;
        lock.sprites[num_screens].SetImage(scaled_lock);
        lock.sprites[num_screens].SetPosition(lock_x, lock_y, 10001);

        # Initialize bullet array for this screen
        if (!bullet.sprites_by_screen[num_screens]) bullet.sprites_by_screen[num_screens] = [];

        # --- Progress Bar Elements ---
        if (!progress_box.sprites[num_screens]) progress_box.sprites[num_screens] = Sprite();
        progress_box_x = Window.GetX(num_screens) + Window.GetWidth(num_screens) / 2 - progress_box.image.GetWidth() / 2;
        progress_box_y = entry_y + entry.image.GetHeight() / 2 - progress_box.image.GetHeight() / 2;
        progress_box.sprites[num_screens].SetImage(progress_box.image);
        progress_box.sprites[num_screens].SetPosition(progress_box_x, progress_box_y, 0);

        if (!progress_bar.sprites[num_screens]) progress_bar.sprites[num_screens] = Sprite();
        progress_bar_x = Window.GetX(num_screens) + Window.GetWidth(num_screens) / 2 - progress_bar.original_image.GetWidth() / 2;
        progress_bar_y = progress_box_y + (progress_box.image.GetHeight() - progress_bar.original_image.GetHeight()) / 2;
        progress_bar.sprites[num_screens].SetPosition(progress_bar_x, progress_bar_y, 1);

        num_screens++;
    }
  }

# Initial draw
draw_theme_on_all_screens();
fun display_normal_callback ()
  {
    draw_theme_on_all_screens(); // Redraw in case monitors changed
    hide_password_dialog();
    
    # Get current mode
    mode = Plymouth.GetMode();
    
    # Only show progress bar for boot and resume modes
    if ((mode == "boot" || mode == "resume") && global.password_shown == 1)
      {
        show_progress_bar();
        start_fake_progress();
      }
  }

fun display_password_callback (prompt, bullets)
  {
    global.password_shown = 1;  # Mark that password dialog has been shown
    
    draw_theme_on_all_screens(); # Redraw in case monitors changed

    # Reset progress when password dialog appears
    stop_fake_progress();
    hide_progress_bar();
    global.max_progress = 0.0;
    global.fake_progress = 0.0;
    global.real_progress = 0.0;
    show_password_dialog();
    
    # Update bullets on all screens
    for (i = 0; entry.sprites[i]; i++)
      {
        # Clear all bullets first
        for (j = 0; bullet.sprites_by_screen[i][j]; j++)
          {
            bullet.sprites_by_screen[i][j].SetOpacity(0);
          }

        # Create and show bullets for current password
        for (j = 0; j < bullets; j++)
          {
            if (!bullet.sprites_by_screen[i][j])
              {
                bullet.sprites_by_screen[i][j] = Sprite(scaled_bullet);
                bullet_x = entry.sprites[i].GetX() + 20 + j * (7 + 5);
                bullet_y = entry.sprites[i].GetY() + entry.image.GetHeight() / 2 - 3.5;
                bullet.sprites_by_screen[i][j].SetPosition(bullet_x, bullet_y, 10002);
              }
            bullet.sprites_by_screen[i][j].SetOpacity(1);
          }
      }
  }

Plymouth.SetDisplayNormalFunction(display_normal_callback);
Plymouth.SetDisplayPasswordFunction(display_password_callback);



fun progress_callback (duration, progress)
  {
    global.real_progress = progress;
    
    # If real progress is above limit, stop fake progress and use real progress
    if (progress > global.fake_progress_limit)
      {
        stop_fake_progress();
        update_progress_bar(progress);
      }
  }

Plymouth.SetBootProgressFunction(progress_callback);

#----------------------------------------- Quit --------------------------------

fun quit_callback ()
{
  for (i = 0; logo.sprites[i]; i++)
  {
    logo.sprites[i].SetOpacity(1);
  }
}

Plymouth.SetQuitFunction(quit_callback);

#----------------------------------------- Message --------------------------------

message_sprite = Sprite();
message_sprite.SetPosition(10, 10, 10000);

fun display_message_callback (text)
{
  my_image = Image.Text(text, 1, 1, 1);
  message_sprite.SetImage(my_image);
}

fun hide_message_callback (text)
{
  message_sprite.SetOpacity(0);
}

Plymouth.SetDisplayMessageFunction (display_message_callback);
Plymouth.SetHideMessageFunction (hide_message_callback);
